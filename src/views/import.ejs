<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Học Viện Kỹ Thuật Mật Mã</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css">
  <link rel="stylesheet" href="/css/styles.css">
  <link rel="stylesheet" href="/css/import.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css">

</head>

<body>
  <!-- Phần trên của navbar chứa logo và tiêu đề -->

  <nav class="navbar-top ">
    <div class="container-fluid">
      <a class="navbar-brand" href="#">
        <img src="/Logo-Hoc-Vien-Ky-Thuat-Mat-Ma-ACTVN.webp" alt="Logo">
        <div class="navbar-title">
          <img src="/dongchu_banner.png" alt="banner">
        </div>
      </a>
    </div>
  </nav>

  <!-- Phần dưới của navbar chứa các mục nằm ngang -->
  <nav class="navbar navbar-expand-lg navbar-bottom sticky-top">
    <div class="container-fluid">
      <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav"
        aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse justify-content-center" id="navbarNav">

        <ul class="navbar-nav">
          <li class="nav-item">
            <a class="nav-link active" id="Home" href=""><i class="fa-solid fa-house"></i></a>
          </li>

          <div class="navbar-nav">
            <div class="nav-item dropdown">
              <a class="nav-link dropdown-toggle" href="/login" id="navbarDropdownUser" data-bs-toggle="dropdown"
                aria-expanded="false">
                Giảng Viên
              </a>
              <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                <a class="nav-link" id="ThongTinGD" href="">Thông tin giảng dạy</a>
                <a class="nav-link" id="Import" href="">Thêm bảng quy chuẩn</a>
                <a class="nav-link" href="/gvmList">Danh sách giảng viên mời</a>
                <a class="nav-link" href="/classInfoGvm">Thông tin lớp giảng viên mời</a>
                <a class="nav-link " href="/infoHDGvm" role="button">Thông tin hợp đồng giảng viên mời</a>
                <a class="nav-link" href="/tableTam">Bảng quy chuẩn dự kiến</a>
                <a class="nav-link" href="/tableTam">Bảng quy chuẩn chính thức</a>
              </div>
            </div>
            <div class="navbar-nav">
              <div class="nav-item dropdown">
                <a class="nav-link dropdown-toggle" href="/login" id="navbarDropdownUser" data-bs-toggle="dropdown"
                  aria-expanded="false">
                  Hi, Lê Đức Thuận
                </a>
                <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                  <a class="dropdown-item" href="#">Thông tin cá nhân</a>
                  <a class="dropdown-item" href="/">Đăng xuất</a>
                </div>
              </div>
        </ul>
      </div>
    </div>
  </nav>


  <div class="container-fluid m-4 box d-flex justify-content-start">
    <div class="mx-2">
      <div class="d-flex justify-content-between">
        <button class="btn btn-outline-primary button" id="chooseFile">Chọn file</button>
        <!-- Combo box Đợt -->
        <select class="form-select w-100px mx-1 selectop" id="combobox-dot">
          <option value="1">Đợt 1</option>
          <option value="2">Đợt 2</option>
        </select>

        <!-- Combo box kì -->
        <select class="form-select w-100px mx-1 selectop" id="combobox-ki">
          <option value="1">Kì 1</option>
          <option value="2">Kì 2</option>
        </select>

        <!-- Combo box Năm -->
        <select class="form-select w-100px mx-1 selectop" id="combobox-nam">
          <option value="2024">2024</option>
          <option value="2024">2025</option>
          <option value="2024">2026</option>
          <option value="2024">2027</option>
        </select>

        <!-- Combo box với các giá trị CNTT, ATTT, DTVT -->
        <select class="form-select w-100px mx-1 selectop" id="combobox-khoa">
          <option value="CNTT">CNTT</option>
          <option value="ATTT">ATTT</option>
          <option value="DTVT">DTVT</option>
        </select>
        <button class="btn btn-outline-primary button" id="import">Thêm</button>
        <button class="btn btn-outline-primary button" id="viewtam">Xem bảng quy chuẩn dự kiến</button>

        <!-- <button class="btn btn-outline-primary" id="importFile">Import</button> -->
      </div>
      <!-- Modal -->
      <div id="action-modal" style="display:none;">
        <div
          style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0, 0, 0, 0.5); display: flex; justify-content: center; align-items: center;">
          <div style="background: white; padding: 20px; border-radius: 8px; max-width: 300px; text-align: center;">
            <p>Tồn tại dữ liệu cũ của! Bạn muốn xóa dữ liệu cũ hay chèn thêm dữ liệu mới?</p>
            <button id="btn-delete" style="margin-right: 10px;">Xóa</button>
            <button id="btn-append">Chèn</button>
            <button id="btn-cancel">Hủy</button>
          </div>
        </div>
      </div>

      <div id="dataTableContainer" class="h-75"></div>
    </div>
  </div>
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    let dataTam = [];

    document.getElementById('chooseFile').addEventListener('click', function () {
      // Tạo một input để chọn file
      const fileInput = document.createElement('input');
      fileInput.type = 'file';
      fileInput.accept = '.xlsx'; // Chỉ cho phép chọn file Excel

      // Khi có file được chọn
      fileInput.addEventListener('change', function () {
        const formData = new FormData();
        formData.append('excelFile', fileInput.files[0]); // Thêm file vào FormData

        // Gửi yêu cầu POST đến server
        fetch('http://localhost:3000/import', {
          method: 'POST',
          body: formData
        })
          .then(response => {
            if (!response.ok) {
              throw new Error('Import thất bại');
            }
            return response.json(); // Chuyển đổi phản hồi sang JSON
          })
          .then(data => {
            if (!data || data.length === 0) {
              throw new Error('Dữ liệu trả về trống');
            }

            // Tạo bảng HTML từ dữ liệu JSON, bỏ qua cột "Ghi chú"
            let tableHtml = '<table class="table table-bordered"><thead><tr>';

            // Lấy tiêu đề từ đối tượng JSON đầu tiên (trừ "Ghi chú")
            const headers = Object.keys(data[0]).filter(key => key !== 'Ghi chú' || key !== 'TT');
            headers.forEach(header => {
              tableHtml += `<th>${header}</th>`;
            });
            tableHtml += '</tr></thead><tbody>';

            // Duyệt qua từng mục trong dữ liệu
            data.forEach(item => {
              tableHtml += '<tr>';
              headers.forEach(key => {
                tableHtml += `<td>${item[key] !== null ? item[key] : ''}</td>`;
              });
              tableHtml += '</tr>';
            });
            tableHtml += '</tbody></table>';

            // Chèn bảng vào thẻ div có id="dataTableContainer"
            document.getElementById('dataTableContainer').innerHTML = tableHtml;

            // Lưu dữ liệu JSON để sử dụng sau
            dataTam = data; // Lưu vào biến toàn cục
          })
          .catch(error => {
            document.getElementById('uploadStatus').innerHTML = `
                    <span style="color: red;">Import thất bại!</span>
                `;
            console.error(error);
          });
      });

      // Tự động mở dialog chọn file
      fileInput.click();
    });

    // document.getElementById('import').addEventListener('click', function () {
    //   let updatedData = [];
    //   if (dataTam.length != 0) {
    //     // Lấy giá trị hiện tại từ combo box "Khoa"
    //     const khoaValue = document.getElementById('combobox-khoa').value;
    //     const dotValue = document.getElementById('combobox-dot').value;
    //     const kiValue = document.getElementById('combobox-ki').value;
    //     const namValue = document.getElementById('combobox-nam').value;


    //     // Gửi giá trị Khoa để kiểm tra tồn tại
    //     fetch('http://localhost:3000/check-khoa', {
    //       method: 'POST',
    //       headers: {
    //         'Content-Type': 'application/json'
    //       },
    //       body: JSON.stringify({ khoa: khoaValue }) // Gửi giá trị Khoa
    //     })
    //       .then(response => {
    //         if (!response.ok) {
    //           throw new Error('Kiểm tra Khoa thất bại');
    //         }
    //         return response.json(); // Chuyển đổi phản hồi sang JSON
    //       })
    //       .then(data => {
    //         if (data.exists) {
    //           // Sử dụng confirm để hiển thị thông báo và nhận câu trả lời từ người dùng
    //           if (confirm('Tồn tại dữ liệu cũ! Bạn có muốn xóa dữ liệu cũ hay chèn thêm?')) {

    //             fetch('http://localhost:3000/delete-khoa', {
    //               method: 'POST',
    //               headers: {
    //                 'Content-Type': 'application/json'
    //               },
    //               body: JSON.stringify({ khoa: khoaValue }) // Gửi giá trị Khoa
    //             })
    //               .then(response => {
    //                 if (!response.ok) {
    //                   throw new Error('Kiểm tra Khoa thất bại');
    //                 }
    //                 alert('Xóa thành công!');
    //               })
    //             // Người dùng ấn "OK", tiếp tục xử lý
    //             updatedData = dataTam.map(item => ({
    //               ...item,            // Sao chép các thuộc tính hiện có của đối tượng
    //               Khoa: khoaValue,    // Thêm thuộc tính mới "Khoa" với giá trị từ combo box
    //               Dot: dotValue,       // Thêm thuộc tính mới "Đợt" với giá trị từ combo box "Đợt"
    //               Ki: kiValue,       // Thêm thuộc tính mới "Đợt" với giá trị từ combo box "Đợt"
    //               Nam: namValue       // Thêm thuộc tính mới "Đợt" với giá trị từ combo box "Đợt"

    //             }));

    //             // Gửi dữ liệu đã được cập nhật đến API save-data
    //             fetch('http://localhost:3000/save-data', {
    //               method: 'POST',
    //               headers: {
    //                 'Content-Type': 'application/json'
    //               },
    //               body: JSON.stringify(updatedData) // Gửi dữ liệu đã được cập nhật
    //             })
    //               .then(response => {
    //                 if (!response.ok) {
    //                   throw new Error('Gửi dữ liệu thất bại');
    //                 }
    //                 return response.json();
    //               })
    //               .then(data => {
    //                 if (data.success) {
    //                   console.log(updatedData);
    //                   alert('Import thành công!');
    //                 } else {
    //                   alert('Import thất bại!');
    //                 }
    //               })
    //               .catch(error => {
    //                 alert('Gửi dữ liệu thất bại!');
    //                 console.error('Error:', error);
    //               });
    //           } else {
    //             // Người dùng ấn "Cancel", không làm gì cả
    //             console.log('');
    //           }
    //         } else {
    //           // Nếu Khoa không tồn tại, tiếp tục thêm và gửi dữ liệu
    //           updatedData = dataTam.map(item => ({
    //             ...item,            // Sao chép các thuộc tính hiện có của đối tượng
    //             Khoa: khoaValue,    // Thêm thuộc tính mới "Khoa" với giá trị từ combo box
    //             Dot: dotValue,      // Thêm thuộc tính mới "Đợt" với giá trị từ combo box "Đợt"
    //             Ki: kiValue,       // Thêm thuộc tính mới "Đợt" với giá trị từ combo box "Đợt"
    //             Nam: namValue       // Thêm thuộc tính mới "Đợt" với giá trị từ combo box "Đợt"
    //           }));

    //           // Gửi dữ liệu đã được cập nhật đến API save-data
    //           fetch('http://localhost:3000/save-data', {
    //             method: 'POST',
    //             headers: {
    //               'Content-Type': 'application/json'
    //             },
    //             body: JSON.stringify(updatedData) // Gửi dữ liệu đã được cập nhật
    //           })
    //             .then(response => {
    //               if (!response.ok) {
    //                 throw new Error('Gửi dữ liệu thất bại');
    //               }
    //               return response.json();
    //             })
    //             .then(data => {
    //               if (data.success) {
    //                 console.log(updatedData);
    //                 alert('Import thành công!');
    //               } else {
    //                 alert('Import thất bại!');
    //               }
    //             })
    //             .catch(error => {
    //               alert('Gửi dữ liệu thất bại!');
    //               console.error('Error:', error);
    //             });
    //         }
    //       })
    //       .catch(error => {
    //         alert('Kiểm tra khoa thất bại!');
    //         console.error('Error:', error);
    //       });
    //   } else {
    //     alert('Vui lòng chọn file!');
    //     return;
    //   }
    // });

    document.getElementById('import').addEventListener('click', function () {
      let updatedData = [];

      if (dataTam.length !== 0) {
        // Lấy giá trị hiện tại từ combo box "Khoa", "Đợt", "Kì", "Năm"
        const khoaValue = document.getElementById('combobox-khoa').value;
        const dotValue = document.getElementById('combobox-dot').value;
        const kiValue = document.getElementById('combobox-ki').value;
        const namValue = document.getElementById('combobox-nam').value;

        // Gửi giá trị để kiểm tra sự tồn tại của dữ liệu khoa
        fetch('http://localhost:3000/check-khoa', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            khoa: khoaValue,
            dot: dotValue,
            ki: kiValue,
            nam: namValue
          })
        })
          .then(response => {
            if (!response.ok) {
              throw new Error('Kiểm tra dữ liệu thất bại');
            }
            return response.json();
          })
          .then(data => {
            if (data.exists) {
              // Hiển thị modal để người dùng chọn giữa Xóa hoặc Chèn
              const modal = document.getElementById('action-modal');
              modal.style.display = 'block';

              // Xử lý sự kiện khi người dùng chọn "Xóa"
              document.getElementById('btn-delete').addEventListener('click', function () {
                modal.style.display = 'none'; // Ẩn modal
                fetch('http://localhost:3000/delete-khoa', {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json'
                  },
                  body: JSON.stringify({
                    khoa: khoaValue,
                    dot: dotValue,
                    ki: kiValue,
                    nam: namValue
                  })
                })
                  .then(response => {
                    if (!response.ok) {
                      throw new Error('Xóa dữ liệu thất bại');
                    }
                    alert('Xóa thành công!');
                  })
                  .catch(error => {
                    alert('Xóa dữ liệu thất bại!');
                    console.error('Error:', error);
                  });
              });

              // Xử lý sự kiện khi người dùng chọn "Chèn"
              document.getElementById('btn-append').addEventListener('click', function () {
                modal.style.display = 'none'; // Ẩn modal
                updatedData = dataTam.map(item => ({
                  ...item,
                  Khoa: khoaValue,
                  Dot: dotValue,
                  Ki: kiValue,
                  Nam: namValue
                }));

                // Gửi dữ liệu đã được cập nhật để chèn thêm vào cơ sở dữ liệu
                fetch('http://localhost:3000/save-data', {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json'
                  },
                  body: JSON.stringify(updatedData)
                })
                  .then(response => {
                    if (!response.ok) {
                      throw new Error('Chèn dữ liệu thất bại');
                    }
                    return response.json();
                  })
                  .then(data => {
                    if (data.success) {
                      alert('Chèn thêm thành công!');
                    } else {
                      alert('Chèn thêm thất bại!');
                    }
                  })
                  .catch(error => {
                    alert('Chèn thêm dữ liệu thất bại!');
                    console.error('Error:', error);
                  });
              });

              // Xử lý sự kiện khi người dùng chọn "Hủy"
              document.getElementById('btn-cancel').addEventListener('click', function () {
                modal.style.display = 'none'; // Ẩn modal
              });

            } else {
              // Nếu Khoa không tồn tại, tiếp tục thêm và gửi dữ liệu
              updatedData = dataTam.map(item => ({
                ...item,
                Khoa: khoaValue,
                Dot: dotValue,
                Ki: kiValue,
                Nam: namValue
              }));

              // Gửi dữ liệu đã được cập nhật để lưu
              fetch('http://localhost:3000/save-data', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify(updatedData)
              })
                .then(response => {
                  if (!response.ok) {
                    throw new Error('Gửi dữ liệu thất bại');
                  }
                  return response.json();
                })
                .then(data => {
                  if (data.success) {
                    alert('Import thành công!');
                  } else {
                    alert('Import thất bại!');
                  }
                })
                .catch(error => {
                  alert('Gửi dữ liệu thất bại!');
                  console.error('Error:', error);
                });
            }
          })
          .catch(error => {
            alert('Kiểm tra khoa thất bại!');
            console.error('Error:', error);
          });
      } else {
        alert('Vui lòng chọn file!');
        return;
      }
    });



  </script>

  <script>
    let dataQC = [];

    // Hàm fetch lần đầu để lấy dữ liệu từ server
    async function fetchData() {
      try {
        const response = await fetch('http://localhost:3000/get-table-tam');
        if (!response.ok) {
          throw new Error('Lấy dữ liệu thất bại');
        }
        const data = await response.json();
        dataQC = data; // Lưu dữ liệu vào dataQC
        console.log('Dữ liệu lấy được:', dataQC);
      } catch (error) {
        console.error('Error:', error);
        alert('Lấy dữ liệu thất bại!');
      }
    }

    // Gọi hàm fetchData để lấy dữ liệu khi click
    document.getElementById('ban-hanh').addEventListener('click', async function () {
      await fetchData(); // Gọi để lấy dữ liệu trước

      // Sau khi lấy dữ liệu, gửi dữ liệu đã cập nhật đến server
      console.log('Dữ liệu sẽ được gửi:', dataQC);
      fetch('http://localhost:3000/ban-hanh', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(dataQC) // Gửi dữ liệu đã được cập nhật
      })
        .then(response => {
          if (!response.ok) {
            throw new Error('Gửi dữ liệu thất bại');
          }
          return response.json();
        })
        .then(data => {
          if (data.success) {
            alert('Ban hành thành công!');
          } else {
            alert('Ban hành thất bại!');
          }
        })
        .catch(error => {
          alert('Gửi dữ liệu thất bại!');
          console.error('Error:', error);
        });
    });
  </script>


  <script>
    document.getElementById('viewtam').onclick = function () {
      window.location.href = 'http://localhost:3000/tableTam'; // Thay URL bằng trang bạn muốn chuyển hướng đến
    }
  </script>


  <!-- Phần phân quyền -->
  <script>
    document.addEventListener('DOMContentLoaded', () => {
      // Thêm sự kiện click cho phần tử có id "import"
      const importLink = document.getElementById("Import");

      importLink.addEventListener("click", function (event) {
        event.preventDefault(); // Ngăn chặn hành vi mặc định của liên kết

        const role = localStorage.getItem("userRole"); // Lấy role từ localStorage

        if (role.includes("DAOTAO") || role.includes("TAICHINH")) {
          window.location.href = "/import";
        } else {
          window.location.href = "/importGvmList";
        }
      });

      // Thêm sự kiện click cho phần tử có id="ThongTinGD"
      const ThongTinGD = document.getElementById("ThongTinGD");

      ThongTinGD.addEventListener("click", function (event) {
        event.preventDefault(); // Ngăn chặn hành vi mặc định của liên kết

        const role = localStorage.getItem("userRole"); // Lấy role từ localStorage

        if (role.includes("DAOTAO") || role.includes("TAICHINH")) {
          window.location.href = "/info2";
        } else {
          window.location.href = "/info";
        }
      });

      // Thêm sự kiện click cho phần tử có id="Home"

      const Home = document.getElementById("Home");

      Home.addEventListener("click", function (event) {
        event.preventDefault(); // Ngăn chặn hành vi mặc định của liên kết

        const role = localStorage.getItem("userRole"); // Lấy role từ localStorage

        if (role.includes("DAOTAO") || role.includes("TAICHINH")) {
          window.location.href = "/maindt";
        } else {
          window.location.href = "/mainkhoa";
        }
      });
    });

  </script>
</body>

</html>