<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Học Viện Kỹ Thuật Mật Mã</title>

  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css" />
  <link rel="stylesheet" href="/css/styles.css" />
  <link rel="stylesheet" href="/css/importGvmList.css" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css" />
</head>

<body>
  <!-- Phần trên của navbar chứa logo và tiêu đề -->

  <nav class="navbar-top">
    <div class="container-fluid">
      <a class="navbar-brand" href="#">
        <img src="/Logo-Hoc-Vien-Ky-Thuat-Mat-Ma-ACTVN.webp" alt="Logo" />
        <div class="navbar-title">
          <img src="/dongchu_banner.png" alt="banner" />
        </div>
      </a>
    </div>
  </nav>

  <!-- Phần dưới của navbar chứa các mục nằm ngang -->

  <nav class="navbar navbar-expand-lg navbar-bottom sticky-top">
    <div class="" style="width: 100%">
      <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav"
        aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" style="width: 100%" id="navbarNav">
        <ul class="navbar-nav">
          <li class="nav-item">
            <a class="nav-link" id="Home" href=""><i class="fa-solid fa-house"></i></a>
          </li>
          <div class="navbar-nav">
            <div class="nav-item dropdown">
              <a class="nav-link dropdown-toggle active" href="/login" id="navbarDropdownUser" data-bs-toggle="dropdown"
                aria-expanded="false">
                Giảng Viên Mời
              </a>
              <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                <a class="nav-link" href="/gvmList">Danh sách giảng viên mời</a>
                <a class="nav-link active'" id="actionButton1" href="/importGvmList" style="width: 100%;">Thêm giảng
                  viên mời bằng file</a>
              </div>
            </div>
          </div>
          <div class="navbar-nav">
            <div class="nav-item dropdown">
              <a class="nav-link dropdown-toggle" href="/login" id="navbarDropdownUser" data-bs-toggle="dropdown"
                aria-expanded="false">
                Bảng Quy Chuẩn
              </a>
              <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                <a class="nav-link" href="/import" id="actionButton2" style="width: 100%;">Thêm file quy chuẩn</a>
                <a class="nav-link" href="/tableTam">Bảng quy chuẩn dự kiến</a>
                <a class="nav-link" href="/tableQC">Bảng quy chuẩn chính thức</a>
                <a class="nav-link" id="ThongTinGD" href="">Thông tin giảng viên theo lớp</a>
              </div>
            </div>
          </div>
          <div class="navbar-nav">
            <div class="nav-item dropdown">
              <a class="nav-link dropdown-toggle" href="/login" id="navbarDropdownUser" data-bs-toggle="dropdown"
                aria-expanded="false">
                Mời Giảng
              </a>
              <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                <a class="nav-link" href="/xemCacLopGvm">Xem các lớp mời</a>

                <a class="nav-link" href="/classInfoGvm">Thông tin lớp giảng viên mời</a>
                <a class="nav-link" href="/hopDongDuKien" role="button">Hợp đồng dự kiến</a>

                <a class="nav-link" href="/infoHDGvm" role="button">Thông tin hợp đồng</a>
                <li class="nav-item"></li>
                <a class="nav-link " href="/phuLucHD">Phụ lục hợp đồng</a>
                </li>
                <a class="nav-link " href="/exportHD">Hợp Đồng</a>

              </div>
            </div>
          </div>
          <div class="navbar-nav">
            <div class="nav-item dropdown">
              <a class="nav-link dropdown-toggle" href="/login" id="navbarDropdownUser" data-bs-toggle="dropdown"
                aria-expanded="false">
                Vượt Giờ
              </a>
              <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                <a class="nav-link" id="ThongTinGD" href="#">COMING SOON</a>
              </div>
            </div>
          </div>
          <div class="navbar-nav">
            <div class="nav-item dropdown">
              <a class="nav-link dropdown-toggle" href="/login" id="navbarDropdownUser" data-bs-toggle="dropdown"
                aria-expanded="false">
                Nghiên Cứu Khoa Học
              </a>
              <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                <a class="nav-link" id="" href="#">COMING SOON</a>
              </div>
            </div>
          </div>
          <div class="navbar-nav">
            <div class="nav-item dropdown">
              <a class="nav-link dropdown-toggle" href="/login" id="navbarDropdownUser" data-bs-toggle="dropdown"
                aria-expanded="false">
                Đồ Án
              </a>
              <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                <a class="nav-link" id="" href="#">COMING SOON</a>
              </div>
            </div>
          </div>
          <div class="navbar-nav">
            <div class="nav-item dropdown">
              <a class="nav-link dropdown-toggle" href="/login" id="navbarDropdownUser" data-bs-toggle="dropdown"
                aria-expanded="false">
                Thống Kê
              </a>
              <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                <a class="nav-link" id="" href="#">COMING SOON</a>
              </div>
            </div>

          </div>
          <div class="navbar-nav">
            <div class="nav-item dropdown">
              <a class="nav-link dropdown-toggle" href="#" id="navbarDropdownUser" data-bs-toggle="dropdown"
                aria-expanded="false">
                Hệ Thống
              </a>
              <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                <a class="nav-link" id="" href="log">Xem File Log</a>
              </div>
            </div>
          </div>
        </ul>
        <div class="navbar-nav">
          <div class="nav-item dropdown">
            <a class="nav-link dropdown-toggle fullname" href="/login" id="navbarDropdownUser" data-bs-toggle="dropdown"
              aria-expanded="false">
              Hi, Lê Đức Thuận
            </a>
            <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
              <a class="dropdown-item" href="#">Thông tin cá nhân</a>
              <a class="dropdown-item" id="changePasswordLink">Đổi mật khẩu</a>
              <a class="dropdown-item" href="/">Đăng xuất</a>
            </div>
          </div>
        </div>
      </div>
    </div>
  </nav>

  <div class="container-fluid m-4 box">
    <div class="mx-5">
      <div class="d-flex justify-content-between">
        <form class="d-flex" action="/postImportGvmList" method="post" enctype="multipart/form-data">
          <input type="file" name="file" class="file-button mx-3" id="fileInput" />
          <button class="btn" id="chosseFile">
            Chọn file
          </button>
        </form>

        <!-- Nút "Nhập" sẽ gửi dữ liệu đã hiển thị để lưu vào DB -->
        <form id="insert" action="/saveToDB" method="post">
          <input type="hidden" name="data" value="<%= JSON.stringify(data) %>" />
          <button type="submit" class="btn" id="">
            Nhập
          </button>
        </form>
      </div>
      <div id="dataTableContainer" class="mt-4">
        <% if (data && data.length> 0) { %>
          <table class="table table-striped">
            <thead>
              <tr>
                <% Object.keys(data[0]).forEach(function(key) { %>
                  <th>
                    <%= key %>
                  </th>
                  <% }) %>
              </tr>
            </thead>
            <tbody>
              <% data.forEach(function(row) { %>
                <tr>
                  <% Object.values(row).forEach(function(value) { %>
                    <td>
                      <%= value %>
                    </td>
                    <% }) %>
                </tr>
                <% }) %>
            </tbody>
          </table>
          <% } else { %>
            <p>Chưa có dữ liệu để hiển thị.</p>
            <% } %>
      </div>
    </div>
  </div>
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>
    document.addEventListener("DOMContentLoaded", () => {
      const isKhoa = localStorage.getItem("isKhoa");

      // Ẩn button ngay khi trang được tải
      const actionButton = document.getElementById('actionButton');
      const actionButton1 = document.getElementById('actionButton1');
      const actionButton2 = document.getElementById('actionButton2');

      if (isKhoa == 0) {
        actionButton1.style.display = 'none'; // Ẩn actionButton1 nếu isKhoa = 0
        actionButton2.style.display = 'inline-block'; // Hiện actionButton2

      } else {
        actionButton1.style.display = 'inline-block'; // Hiện actionButton1 nếu isKhoa khác 0
        actionButton2.style.display = 'none'; // Ẩn actionButton2

      }
    });
  </script>

  <script>
    let storedData = [];
    async function fetchGVMLists() {
      try {
        const response = await fetch("/api/importGvmList");
        if (!response.ok) {
          throw new Error("Network response was not ok");
        }

        const gvmLists = await response.json();
        storedData = gvmLists;
        return gvmLists;
      } catch (error) {
        console.error("Error fetching data:", error);
      }
    }

    document
      .getElementById("insert")
      .addEventListener("submit", function (event) {
        event.preventDefault(); // Ngăn chặn hành động mặc định của form

        fetch(this.action, {
          method: "POST",
          body: new URLSearchParams(new FormData(this)), // Chuyển đổi dữ liệu form thành URLSearchParams
          headers: {
            "Content-Type": "application/x-www-form-urlencoded", // Định dạng nội dung
          },
        })
          .then((response) => response.json())
          .then((data) => {
            alert(data.message); // Hiển thị thông báo alert
          })
          .catch((error) => {
            console.error("Error:", error);
            alert("Đã xảy ra lỗi trong quá trình lưu dữ liệu!");
          });
      });
  </script>

  <!-- <script>
    let dataTam = [];

    document.getElementById('chosseFile').addEventListener('click', function () {
      // Tạo một input để chọn file
      const fileInput = document.createElement('input');
      fileInput.type = 'file';
      fileInput.accept = '.xlsx'; // Chỉ cho phép chọn file Excel

      // Khi có file được chọn
      fileInput.addEventListener('change', function () {
        const formData = new FormData();
        formData.append('excelFile', fileInput.files[0]); // Thêm file vào FormData

        // Gửi yêu cầu POST đến server
        fetch('http://localhost:3000/postImportGvmList', {
          method: 'POST',
          body: formData
        })
          .then(response => {
            if (!response.ok) {
              throw new Error('Import thất bại');
            }
            return response.json(); // Chuyển đổi phản hồi sang JSON
          })
          .then(data => {
            if (!data || data.length === 0) {
              throw new Error('Dữ liệu trả về trống');
            }

            // Tạo bảng HTML từ dữ liệu JSON, bỏ qua cột "Ghi chú"
            let tableHtml = '<table class="table table-bordered"><thead><tr>';

            // Lấy tiêu đề từ đối tượng JSON đầu tiên (trừ "Ghi chú")
            const headers = Object.keys(data[0]).filter(key => key !== 'Ghi chú');
            headers.forEach(header => {
              tableHtml += `<th>${header}</th>`;
            });
            tableHtml += '</tr></thead><tbody>';

            // Duyệt qua từng mục trong dữ liệu
            data.forEach(item => {
              tableHtml += '<tr>';
              headers.forEach(key => {
                tableHtml += `<td>${item[key] !== null ? item[key] : ''}</td>`;
              });
              tableHtml += '</tr>';
            });
            tableHtml += '</tbody></table>';

            // Chèn bảng vào thẻ div có id="dataTableContainer"
            document.getElementById('dataTableContainer').innerHTML = tableHtml;

            // Lưu dữ liệu JSON để sử dụng sau
            dataTam = data; // Lưu vào biến toàn cục
          })
          .catch(error => {
            document.getElementById('uploadStatus').innerHTML = `
                    <span style="color: red;">Import thất bại!</span>
                `;
            console.error(error);
          });
      });

      // Tự động mở dialog chọn file
      fileInput.click();
    });

    document.getElementById('import').addEventListener('click', function () {
      let updatedData = [];
      if (dataTam.length != 0) {
        // Lấy giá trị hiện tại từ combo box "Khoa"
        const khoaValue = document.getElementById('MaPhongBan').value;
        const dotValue = document.getElementById('combobox-dot').value;
        const kiValue = document.getElementById('combobox-ki').value;
        const namValue = document.getElementById('NamHoc').value;


        // Gửi giá trị Khoa để kiểm tra tồn tại
        fetch('http://localhost:3000/check-khoa', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ khoa: khoaValue }) // Gửi giá trị Khoa
        })
          .then(response => {
            if (!response.ok) {
              throw new Error('Kiểm tra Khoa thất bại');
            }
            return response.json(); // Chuyển đổi phản hồi sang JSON
          })
          .then(data => {
            if (data.exists) {
              // Sử dụng confirm để hiển thị thông báo và nhận câu trả lời từ người dùng
              if (confirm('Tồn tại dữ liệu cũ! Bạn có muốn xóa hết dữ liệu cũ không?')) {

                fetch('http://localhost:3000/delete-khoa', {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json'
                  },
                  body: JSON.stringify({ khoa: khoaValue }) // Gửi giá trị Khoa
                })
                  .then(response => {
                    if (!response.ok) {
                      throw new Error('Kiểm tra Khoa thất bại');
                    }
                    alert('Xóa thành công!');
                  })
                // Người dùng ấn "OK", tiếp tục xử lý
                updatedData = dataTam.map(item => ({
                  ...item,            // Sao chép các thuộc tính hiện có của đối tượng
                  Khoa: khoaValue,    // Thêm thuộc tính mới "Khoa" với giá trị từ combo box
                  Dot: dotValue,       // Thêm thuộc tính mới "Đợt" với giá trị từ combo box "Đợt"
                  Ki: kiValue,       // Thêm thuộc tính mới "Đợt" với giá trị từ combo box "Đợt"
                  Nam: namValue       // Thêm thuộc tính mới "Đợt" với giá trị từ combo box "Đợt"

                }));

                // Gửi dữ liệu đã được cập nhật đến API save-data
                fetch('http://localhost:3000/save-data', {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json'
                  },
                  body: JSON.stringify(updatedData) // Gửi dữ liệu đã được cập nhật
                })
                  .then(response => {
                    if (!response.ok) {
                      throw new Error('Gửi dữ liệu thất bại');
                    }
                    return response.json();
                  })
                  .then(data => {
                    if (data.success) {
                      alert('Import thành công!');
                    } else {
                      alert('Import thất bại!');
                    }
                  })
                  .catch(error => {
                    alert('Gửi dữ liệu thất bại!');
                    console.error('Error:', error);
                  });
              } else {
                // Người dùng ấn "Cancel", không làm gì cả
                console.log('Người dùng hủy thao tác import.');
              }
            } else {
              // Nếu Khoa không tồn tại, tiếp tục thêm và gửi dữ liệu
              updatedData = dataTam.map(item => ({
                ...item,            // Sao chép các thuộc tính hiện có của đối tượng
                Khoa: khoaValue,    // Thêm thuộc tính mới "Khoa" với giá trị từ combo box
                Dot: dotValue       // Thêm thuộc tính mới "Đợt" với giá trị từ combo box "Đợt"
              }));

              // Gửi dữ liệu đã được cập nhật đến API save-data
              fetch('http://localhost:3000/save-data', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify(updatedData) // Gửi dữ liệu đã được cập nhật
              })
                .then(response => {
                  if (!response.ok) {
                    throw new Error('Gửi dữ liệu thất bại');
                  }
                  return response.json();
                })
                .then(data => {
                  if (data.success) {
                    alert('Import thành công!');
                  } else {
                    alert('Import thất bại!');
                  }
                })
                .catch(error => {
                  alert('Gửi dữ liệu thất bại!');
                  console.error('Error:', error);
                });
            }
          })
          .catch(error => {
            alert('Kiểm tra khoa thất bại!');
            console.error('Error:', error);
          });
      } else {
        alert('Vui lòng chọn file!');
        return;
      }
    });
  </script> -->

  <!-- Phần phân quyền -->
  <script>
    document.addEventListener("DOMContentLoaded", () => {

      // Thêm sự kiện click cho phần tử có id="ThongTinGD"
      const ThongTinGD = document.getElementById("ThongTinGD");

      ThongTinGD.addEventListener("click", function (event) {
        event.preventDefault(); // Ngăn chặn hành vi mặc định của liên kết

        const isKhoa = localStorage.getItem("isKhoa"); // Lấy role từ localStorage

        if (isKhoa == 0) {
          // Nếu là đào tạo hoặc tài chính
          window.location.href = "/info2";
        } else {
          window.location.href = "/info";
        }
      });

      // Thêm sự kiện click cho phần tử có id="Home"

      const Home = document.getElementById("Home");

      Home.addEventListener("click", function (event) {
        event.preventDefault(); // Ngăn chặn hành vi mặc định của liên kết

        const isKhoa = localStorage.getItem("isKhoa");

        if (isKhoa == 0) {
          // Nếu là đào tạo hoặc tài chính
          window.location.href = "/maindt";
        } else {
          window.location.href = "/mainkhoa";
        }
      });
    });
  </script>

  <script>
    window.onload = function () {
      const TenNhanVien = localStorage.getItem("TenNhanVien"); // Lấy tên người dùng từ localStorage
      let Role = localStorage.getItem("userRole");
      if (Role.toUpperCase() == 'LÃNH ĐẠO KHOA') {
        Role = 'LĐK';
      }

      if (TenNhanVien) {
        // Hiển thị tên người dùng trên phần tử HTML
        document.querySelector(
          ".fullname"
        ).innerText = `${TenNhanVien} - ${Role}`;
      } else {
        document.querySelector(".fullname").innerText = "Hi, Guest"; // Hiển thị nếu không có tên người dùng
      }

      document.querySelector(".role").innerText = `${Role}`;
    };
  </script>
  <script>
    document.getElementById("changePasswordLink").addEventListener("click", function (event) {
      event.preventDefault(); // Ngăn chặn hành vi mặc định của thẻ a
      const tenDangNhap = localStorage.getItem("TenDangNhap"); // Lấy TenDangNhap từ localStorage

      if (tenDangNhap) {
        // Chuyển hướng đến trang changePassword và truyền TenDangNhap trong URL
        window.location.href = `/changePassword?tenDangNhap=${encodeURIComponent(tenDangNhap)}`;
      } else {
        alert("Không tìm thấy TenDangNhap trong localStorage.");
      }
    });
  </script>
</body>

</html>