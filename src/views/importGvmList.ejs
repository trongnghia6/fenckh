<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Học Viện Kỹ Thuật Mật Mã</title>

  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css">
  <link rel="stylesheet" href="/css/styles.css">

  <style>
    /* Định dạng cho input file để giống với button */
.file-button {
    display: inline-block;
    padding: 10px 20px; /* Khoảng cách bên trong */
    font-size: 16px; /* Kích thước chữ */
    color: blue; /* Màu chữ */
    background-color: white; /* Màu nền */
    border: 1px solid blue; /* Không có viền */
    border-radius: 5px; /* Bo tròn góc */
    cursor: pointer; /* Con trỏ chuột thành hình bàn tay */
    text-align: center; /* Căn giữa chữ */
    transition: background-color 0.3s; /* Hiệu ứng chuyển màu */
}

/* Hiệu ứng khi hover */
.file-button:hover {
    background-color: #0056b3; /* Màu nền khi hover */
    color: white;
}

/* Ẩn gốc của input file */
.file-button::-webkit-file-upload-button {
    display: none; /* Ẩn nút gốc */
}


  </style>
</head>

<body>
  <!-- Phần trên của navbar chứa logo và tiêu đề -->
  <div class="fixed-top">
    <nav class="navbar-top ">
      <div class="container-fluid">
        <a class="navbar-brand" href="#">
          <img src="/Logo-Hoc-Vien-Ky-Thuat-Mat-Ma-ACTVN.webp" alt="Logo">
          <div class="navbar-title">
            <img src="/dongchu_banner.png" alt="banner">
          </div>
        </a>
      </div>
    </nav>

    <!-- Phần dưới của navbar chứa các mục nằm ngang -->
    <nav class="navbar navbar-expand-lg navbar-bottom">
      <div class="container-fluid">
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav"
          aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
          <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse justify-content-center" id="navbarNav">
          <ul class="navbar-nav">
            <li class="nav-item">
              <a class="nav-link" href="/maindt">HOME</a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="/teachingInfo">Thông tin GD</a>
            </li>
            <li>
            <li class="nav-item">
              <a class="nav-link active" href="/importGvmList">Import</a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="#">Duyệt</a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="/maindt/tableQC">Bảng quy chuẩn</a>
            </li>
            <div class="navbar-nav">
              <div class="nav-item dropdown">
                <a class="nav-link dropdown-toggle" href="/login" id="navbarDropdownUser" data-bs-toggle="dropdown"
                  aria-expanded="false">
                  Hi, Lê Đức Thuận
                </a>
                <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                  <a class="dropdown-item" href="#">Thông tin cá nhân</a>
                  <a class="dropdown-item" href="/">Đăng xuất</a>
                </div>
              </div>
          </ul>
        </div>
      </div>
    </nav>
  </div>


  <div class="container-fluid my-4 mg-top">
    <div class="mx-5">
      <div class="d-flex justify-content-between">
        <form action="/postImportGvmList" method="post" enctype="multipart/form-data">
            <input type="file" name="file" class="file-button" id="fileInput">
            <button class="btn btn-outline-primary" id="chosseFile">Chọn file</button>
        </form>
      
        <button class="btn btn-outline-primary" id="import">Hiển thị</button>
        <button class="btn btn-outline-primary" id="ban-hanh">Nhập</button>

      </div>
      <div id="dataTableContainer" class="h-75"></div>
    </div>
  </div>
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

<script>
    async function fetchGVMLists() {
        try {
            const response = await fetch('/api/importGvmList');
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
    
            const gvmLists = await response.json();
            return gvmLists;
        } catch (error) {
            console.error('Error fetching data:', error);
        }
      }
</script>
  
  <!-- <script>
    let dataTam = [];

    document.getElementById('chosseFile').addEventListener('click', function () {
      // Tạo một input để chọn file
      const fileInput = document.createElement('input');
      fileInput.type = 'file';
      fileInput.accept = '.xlsx'; // Chỉ cho phép chọn file Excel

      // Khi có file được chọn
      fileInput.addEventListener('change', function () {
        const formData = new FormData();
        formData.append('excelFile', fileInput.files[0]); // Thêm file vào FormData

        // Gửi yêu cầu POST đến server
        fetch('http://localhost:3000/postImportGvmList', {
          method: 'POST',
          body: formData
        })
          .then(response => {
            if (!response.ok) {
              throw new Error('Import thất bại');
            }
            return response.json(); // Chuyển đổi phản hồi sang JSON
          })
          .then(data => {
            if (!data || data.length === 0) {
              throw new Error('Dữ liệu trả về trống');
            }

            // Tạo bảng HTML từ dữ liệu JSON, bỏ qua cột "Ghi chú"
            let tableHtml = '<table class="table table-bordered"><thead><tr>';

            // Lấy tiêu đề từ đối tượng JSON đầu tiên (trừ "Ghi chú")
            const headers = Object.keys(data[0]).filter(key => key !== 'Ghi chú');
            headers.forEach(header => {
              tableHtml += `<th>${header}</th>`;
            });
            tableHtml += '</tr></thead><tbody>';

            // Duyệt qua từng mục trong dữ liệu
            data.forEach(item => {
              tableHtml += '<tr>';
              headers.forEach(key => {
                tableHtml += `<td>${item[key] !== null ? item[key] : ''}</td>`;
              });
              tableHtml += '</tr>';
            });
            tableHtml += '</tbody></table>';

            // Chèn bảng vào thẻ div có id="dataTableContainer"
            document.getElementById('dataTableContainer').innerHTML = tableHtml;

            // Lưu dữ liệu JSON để sử dụng sau
            dataTam = data; // Lưu vào biến toàn cục
          })
          .catch(error => {
            document.getElementById('uploadStatus').innerHTML = `
                    <span style="color: red;">Import thất bại!</span>
                `;
            console.error(error);
          });
      });

      // Tự động mở dialog chọn file
      fileInput.click();
    });

    document.getElementById('import').addEventListener('click', function () {
      let updatedData = [];
      if (dataTam.length != 0) {
        // Lấy giá trị hiện tại từ combo box "Khoa"
        const khoaValue = document.getElementById('combobox-khoa').value;
        const dotValue = document.getElementById('combobox-dot').value;
        const kiValue = document.getElementById('combobox-ki').value;
        const namValue = document.getElementById('combobox-nam').value;


        // Gửi giá trị Khoa để kiểm tra tồn tại
        fetch('http://localhost:3000/check-khoa', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ khoa: khoaValue }) // Gửi giá trị Khoa
        })
          .then(response => {
            if (!response.ok) {
              throw new Error('Kiểm tra Khoa thất bại');
            }
            return response.json(); // Chuyển đổi phản hồi sang JSON
          })
          .then(data => {
            if (data.exists) {
              // Sử dụng confirm để hiển thị thông báo và nhận câu trả lời từ người dùng
              if (confirm('Tồn tại dữ liệu cũ! Bạn có muốn xóa hết dữ liệu cũ không?')) {

                fetch('http://localhost:3000/delete-khoa', {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json'
                  },
                  body: JSON.stringify({ khoa: khoaValue }) // Gửi giá trị Khoa
                })
                  .then(response => {
                    if (!response.ok) {
                      throw new Error('Kiểm tra Khoa thất bại');
                    }
                    alert('Xóa thành công!');
                  })
                // Người dùng ấn "OK", tiếp tục xử lý
                updatedData = dataTam.map(item => ({
                  ...item,            // Sao chép các thuộc tính hiện có của đối tượng
                  Khoa: khoaValue,    // Thêm thuộc tính mới "Khoa" với giá trị từ combo box
                  Dot: dotValue,       // Thêm thuộc tính mới "Đợt" với giá trị từ combo box "Đợt"
                  Ki: kiValue,       // Thêm thuộc tính mới "Đợt" với giá trị từ combo box "Đợt"
                  Nam: namValue       // Thêm thuộc tính mới "Đợt" với giá trị từ combo box "Đợt"

                }));

                // Gửi dữ liệu đã được cập nhật đến API save-data
                fetch('http://localhost:3000/save-data', {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json'
                  },
                  body: JSON.stringify(updatedData) // Gửi dữ liệu đã được cập nhật
                })
                  .then(response => {
                    if (!response.ok) {
                      throw new Error('Gửi dữ liệu thất bại');
                    }
                    return response.json();
                  })
                  .then(data => {
                    if (data.success) {
                      alert('Import thành công!');
                    } else {
                      alert('Import thất bại!');
                    }
                  })
                  .catch(error => {
                    alert('Gửi dữ liệu thất bại!');
                    console.error('Error:', error);
                  });
              } else {
                // Người dùng ấn "Cancel", không làm gì cả
                console.log('Người dùng hủy thao tác import.');
              }
            } else {
              // Nếu Khoa không tồn tại, tiếp tục thêm và gửi dữ liệu
              updatedData = dataTam.map(item => ({
                ...item,            // Sao chép các thuộc tính hiện có của đối tượng
                Khoa: khoaValue,    // Thêm thuộc tính mới "Khoa" với giá trị từ combo box
                Dot: dotValue       // Thêm thuộc tính mới "Đợt" với giá trị từ combo box "Đợt"
              }));

              // Gửi dữ liệu đã được cập nhật đến API save-data
              fetch('http://localhost:3000/save-data', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify(updatedData) // Gửi dữ liệu đã được cập nhật
              })
                .then(response => {
                  if (!response.ok) {
                    throw new Error('Gửi dữ liệu thất bại');
                  }
                  return response.json();
                })
                .then(data => {
                  if (data.success) {
                    alert('Import thành công!');
                  } else {
                    alert('Import thất bại!');
                  }
                })
                .catch(error => {
                  alert('Gửi dữ liệu thất bại!');
                  console.error('Error:', error);
                });
            }
          })
          .catch(error => {
            alert('Kiểm tra khoa thất bại!');
            console.error('Error:', error);
          });
      } else {
        alert('Vui lòng chọn file!');
        return;
      }
    });
  </script> -->

 

</body>

</html>