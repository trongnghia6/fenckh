<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Học Viện Kỹ Thuật Mật Mã</title>
  <link rel="stylesheet" href="/css/table.css" />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css" />
  <link rel="stylesheet" href="/css/gvmList.css" />
  <link rel="stylesheet" href="/css/styles.css" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css" />

  <style>
    .suggestions {
      position: absolute;
      /* Đảm bảo gợi ý nằm bên trên các thành phần khác */
      top: calc(100% + 5px);
      /* Đặt gợi ý phía trên input với một khoảng cách */
      left: 0;
      background-color: #f0f0f0;
      color: #000;
      border: 1px solid #ccc;
      box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
      z-index: 1000;
      /* Đảm bảo gợi ý nằm trên các thành phần khác */
      border-radius: 4px;
      max-height: 300px;
      overflow-y: auto;
    }

    /* Hiệu ứng lung linh khi hover */
    .suggestions:hover {
      background-color: #e0e0e0;
      /* Thay đổi màu nền khi hover */
      box-shadow: 0px 8px 16px rgba(0, 0, 0, 0.2);
      /* Tăng độ bóng khi hover */
    }


    /* CSS cho từng mục gợi ý */
    .suggestion-item {
      padding: 8px 12px;
      /* Khoảng cách bên trong từng mục */
      cursor: pointer;
      /* Con trỏ chuột thay đổi khi hover */
      transition: background-color 0.2s ease;
      /* Tạo hiệu ứng chuyển đổi mượt mà khi hover */
    }

    /* Hiệu ứng khi người dùng di chuột vào mục gợi ý */
    .suggestion-item:hover {
      background-color: #f0f0f0;
      /* Màu nền khi hover */
    }

    /* Đặt lại một số thuộc tính khi input mất focus */
    input:focus+.suggestions {
      display: block;
      /* Đảm bảo khung hiển thị khi input được focus */
    }

    /* Đảm bảo container gợi ý không bị tràn ra ngoài khung nếu có */
    .suggestions {
      overflow: hidden;
    }
  </style>
  <!-- Phân quyền -->
  <script>
    document.addEventListener("DOMContentLoaded", () => {
      const isKhoa = localStorage.getItem("isKhoa");

      // Ẩn button ngay khi trang được tải
      const createGvm = document.getElementById("createGvm");
      // Ẩn phần lọc khoa nếu role là Khoa
      const filterByDepartment =
        document.getElementById("filterByDepartment");

      if (isKhoa == 0) {
        createGvm.style.display = "none"; // Ẩn button
      } else {
        filterByDepartment.style.display = "none";
      }
    });
  </script>
</head>

<body>
  <nav class="navbar-top">
    <div class="container-fluid">
      <a class="navbar-brand" href="#">
        <img src="/Logo-Hoc-Vien-Ky-Thuat-Mat-Ma-ACTVN.webp" alt="Logo" />
        <div class="navbar-title">
          <img src="/dongchu_banner.png" alt="banner" />
        </div>
      </a>
    </div>
  </nav>

  <!-- Phần dưới của navbar chứa các mục nằm ngang -->
  <nav class="navbar navbar-expand-lg navbar-bottom sticky-top">
    <div class="" style="width: 100%">
      <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav"
        aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" style="width: 100%" id="navbarNav">
        <ul class="navbar-nav">
          <li class="nav-item">
            <a class="nav-link" id="Home" href=""><i class="fa-solid fa-house"></i></a>
          </li>
          <div class="navbar-nav">
            <div class="nav-item dropdown">
              <a class="nav-link dropdown-toggle active" href="/login" id="navbarDropdownUser" data-bs-toggle="dropdown"
                aria-expanded="false">
                Giảng Viên Mời
              </a>
              <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                <a class="nav-link active" href="/gvmList">Danh sách giảng viên mời</a>
                <a class="nav-link" id="actionButton1" href="/importGvmList" style="width: 100%;">Thêm giảng viên mời
                  bằng file</a>
              </div>
            </div>
          </div>
          <div class="navbar-nav">
            <div class="nav-item dropdown">
              <a class="nav-link dropdown-toggle" href="/login" id="navbarDropdownUser" data-bs-toggle="dropdown"
                aria-expanded="false">
                Bảng Quy Chuẩn
              </a>
              <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                <a class="nav-link" href="/tableTam">Bảng quy chuẩn dự kiến</a>
                <a class="nav-link" href="/tableQC">Bảng quy chuẩn chính thức</a>
                <a class="nav-link" id="ThongTinGD" href="">Thông tin giảng viên theo lớp</a>
              </div>
            </div>
          </div>
          <div class="navbar-nav">
            <div class="nav-item dropdown">
              <a class="nav-link dropdown-toggle " href="/login" id="navbarDropdownUser" data-bs-toggle="dropdown"
                aria-expanded="false">
                Mời Giảng
              </a>
              <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                <a class="nav-link" href="/xemCacLopGvm">Xem các lớp mời</a>

                <a class="nav-link " href="/classInfoGvm">Thông tin lớp giảng viên mời</a>
                <a class="nav-link" href="/infoHDGvm" role="button">Thông tin hợp đồng</a>
                <li class="nav-item"></li>
                <a class="nav-link " href="/phuLucHD">Phụ lục hợp đồng</a>
                </li>
                <a class="nav-link " href="/exportHD">Hợp Đồng</a>

              </div>
            </div>
          </div>
          <div class="navbar-nav">
            <div class="nav-item dropdown">
              <a class="nav-link dropdown-toggle" href="/login" id="navbarDropdownUser" data-bs-toggle="dropdown"
                aria-expanded="false">
                Vượt Giờ
              </a>
              <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                <a class="nav-link" id="" href="#">COMING SOON</a>
              </div>
            </div>
          </div>
          <div class="navbar-nav">
            <div class="nav-item dropdown">
              <a class="nav-link dropdown-toggle" href="/login" id="navbarDropdownUser" data-bs-toggle="dropdown"
                aria-expanded="false">
                Nghiên Cứu Khoa Học
              </a>
              <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                <a class="nav-link" id="" href="#">COMING SOON</a>
              </div>
            </div>
          </div>
          <div class="navbar-nav">
            <div class="nav-item dropdown">
              <a class="nav-link dropdown-toggle" href="/login" id="navbarDropdownUser" data-bs-toggle="dropdown"
                aria-expanded="false">
                Đồ Án
              </a>
              <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                <a class="nav-link" id="" href="#">COMING SOON</a>
              </div>
            </div>
          </div>
          <div class="navbar-nav">
            <div class="nav-item dropdown">
              <a class="nav-link dropdown-toggle" href="/login" id="navbarDropdownUser" data-bs-toggle="dropdown"
                aria-expanded="false">
                Thống Kê
              </a>
              <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                <a class="nav-link" id="" href="#">COMING SOON</a>
              </div>
            </div>

          </div>
          <div class="navbar-nav">
            <div class="nav-item dropdown">
              <a class="nav-link dropdown-toggle" href="#" id="navbarDropdownUser" data-bs-toggle="dropdown"
                aria-expanded="false">
                 Hệ Thống
              </a>
              <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                <a class="nav-link" id="" href="log">Xem File Log</a>
              </div>
            </div>
          </div>
        </ul>
        <div class="navbar-nav">
          <div class="nav-item dropdown">
            <a class="nav-link dropdown-toggle fullname" href="/login" id="navbarDropdownUser" data-bs-toggle="dropdown"
              aria-expanded="false">
              Hi, Lê Đức Thuận
            </a>
            <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
              <a class="dropdown-item" href="#">Thông tin cá nhân</a>
              <a class="dropdown-item" id="changePasswordLink">Đổi mật khẩu</a>
              <a class="dropdown-item" href="/">Đăng xuất</a>
            </div>
          </div>
        </div>
      </div>
    </div>
  </nav>

  <div class="container-fluid box m-4">
    <!-- Main content -->
    <div class="gvmList">
      <div class="m-3">
        <div class="">
          <h1>DANH SÁCH GIẢNG VIÊN MỜI</h1>
          <div class="header-actions">
            <button id="createGvm" class="bi bi-plus btn" onclick="addClass()">
             Thêm giảng viên mời
            </button>
            <input type="text" placeholder="Tìm kiếm theo Tên..." class="search" id="searchInput"
              onkeyup="searchClass()" />
            <!-- Tìm kiếm theo bộ môn -->
            <input type="text" placeholder="Tìm kiếm theo Bộ môn" class="searchBoMon" id="searchBoMon"
              onkeyup="searchBoMon(); showSuggestionsBoMon(this);" onclick="showSuggestionsBoMon(this)" />

            <!-- Lọc theo khoa -->
            <select id="filterByDepartment" class="filter" onchange="filterClasses()">
              <option value="all">Tất cả</option>
              <% phongBanList.forEach(function(phongBan) { %>
                <option value="<%= phongBan.MaPhongBan %>">
                  <%= phongBan.TenPhongBan %>
                </option>
                <% }); %>
            </select>
            <!-- <select
                      id="filterByDepartment"
                      class="filter"
                      onchange="filterClasses()"
                    >
                      <option value="">Tất cả</option>
                      <option value="CNTT">Công nghệ thông tin</option>
                      <option value="ATTT">An toàn thông tin</option>
                      <option value="DTVT">Điện tử viễn thông</option>
                      <option value="MM">Mật mã</option>
                    </select> -->
          </div>
          <table class="class-table" id="classTable">
            <thead>
              <tr>
                <th>STT</th>
                <th>Mã giảng viên mời</th>
                <th>Tên giảng viên mời</th>
                <th>Ngày sinh</th>
                <th style="display: none;">Khoa</th>
                <th>Bộ môn</th>
                <th>Hành động</th>
              </tr>
            </thead>
            <tbody>
              <% const options = { year: 'numeric', month: '2-digit', day: '2-digit' }; %>
              <% for (let i = 0; i < gvmLists.length; i++) { %>
                <tr>
                  <td><%= i + 1 %></td>
                  <td><%= gvmLists[i].MaGvm %></td>
                  <td><%= gvmLists[i].HoTen %></td>
                  <td><%= new Date(gvmLists[i].NgaySinh).toLocaleDateString('vi-VN', options) %></td>
                  <td style="display: none;"><%= gvmLists[i].MaPhongBan %></td>
                  <td id="BoMon"><%= gvmLists[i].MonGiangDayChinh %></td>
                  <td>
                    <button class="action-button edit"
                    onclick="editClass(this, <%= parseInt(gvmLists[i].id_Gvm)%>)">
                    ✏️
                  </button>
                  <button class="action-button view"
                    onclick="viewClass(this, <%= parseInt(gvmLists[i].id_Gvm) - 1 %>)">
                    👁️
                  </button>
                  </td>
                </tr>
              <% } %>
            </tbody>

            <!-- code cũ -->
            <!-- <tbody>
              <% for (var i=0; i < gvmLists.length; i++) {%>
                <tr>
                  <td>
                    <%= i+1 %>
                  </td>
                  <td>
                    <%= gvmLists[i].MaGvm %>
                  </td>
                  <td>
                    <%= gvmLists[i].HoTen %>
                  </td>

                  <% const options={ year: 'numeric' , month: '2-digit' , day:'2-digit' }; %>
                    <td>
                      <%= new Date(gvmLists[i].NgaySinh).toLocaleDateString('vi-VN', options) %>
                    </td>
                    <td style="display: none;">
                      <%= gvmLists[i].MaPhongBan %>
                    </td>
                    <td id="BoMon">
                      <%= gvmLists[i].MonGiangDayChinh %>
                    </td>

                    <td>
                      <button class="action-button edit"
                        onclick="editClass(this, <%= parseInt(gvmLists[i].id_Gvm) - 1 %>)">
                        ✏️
                      </button>
                      <button class="action-button view"
                        onclick="viewClass(this, <%= parseInt(gvmLists[i].id_Gvm) - 1 %>)">
                        👁️
                      </button>
                    </td>
                </tr>
                <% } %>
            </tbody> -->
          </table>

        </div>
      </div>
    </div>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
      document.addEventListener("DOMContentLoaded", () => {
        const isKhoa = localStorage.getItem("isKhoa");

        // Ẩn button ngay khi trang được tải
        const actionButton = document.getElementById('actionButton');
        const actionButton1 = document.getElementById('actionButton1');
        const actionButton2 = document.getElementById('actionButton2');

        if (isKhoa == 0) {
          actionButton1.style.display = 'none'; // Ẩn actionButton1 nếu isKhoa = 0
          actionButton2.style.display = 'inline-block'; // Hiện actionButton2

        } else {
          actionButton1.style.display = 'inline-block'; // Hiện actionButton1 nếu isKhoa khác 0
          actionButton2.style.display = 'none'; // Ẩn actionButton2

        }
      });
    </script>

    <script>
      // Tìm kiếm giảng viên mời theo tên
      function searchClass() {
        let input = document.getElementById("searchInput").value.toLowerCase();
        let table = document.getElementById("classTable");
        let tr = table.getElementsByTagName("tr");

        for (let i = 1; i < tr.length; i++) {
          let td = tr[i].getElementsByTagName("td")[2];
          if (td) {
            let textValue = td.textContent || td.innerText;
            if (textValue.toLowerCase().indexOf(input) > -1) {
              tr[i].style.display = "";
            } else {
              tr[i].style.display = "none";
            }
          }
        }
      }
      // Tìm kiếm theo bộ môn
      function searchBoMon() {
        console.log()
        alert('mé')
        const input = document.getElementById('searchBoMon');
        const filter = input.value.trim().toLowerCase(); // Bỏ khoảng trắng và chuyển chữ thường
        const tableRows = document.querySelectorAll('#tableBody tr');

        tableRows.forEach(row => {
          const nameInput = row.querySelector('td:nth-child(7) input[name="bomon"]'); // Lấy input có name="bomon" ở cột thứ 7
          const checkbox = row.querySelector('input[type="checkbox"]');

          if (nameInput) {
            const name = nameInput.value.toLowerCase(); // Lấy giá trị của input có name="bomon"

            if (filter === '' || name.includes(filter)) {
              row.style.display = ''; // Hiện hàng nếu khớp hoặc filter trống
              checkbox.disabled = false; // Kích hoạt checkbox
            } else {
              row.style.display = 'none'; // Ẩn hàng nếu không khớp
              checkbox.disabled = true; // Vô hiệu hóa checkbox
            }
          }
        });
      }



      // Thêm lớp học
      function addClass() {
        window.location.href = "/daotaoxemhd/daotaonhap";
      }

      // Chỉnh sửa gvm
      function editClass(button, index) {
        var hre = "/updateGvm/" + index;
        window.location.href = hre;
      }
      function viewClass(button, index) {
        var hre = "/viewGvm/" + index;
        window.location.href = hre;
      }

      // Hàm này sẽ được gọi khi trang mới đã tải
      function disableInputs() {
        var inputs = document.querySelectorAll("input");
        inputs.forEach(function (input) {
          input.disabled = true;
        });
      }

      // Gọi hàm disableInputs khi trang đã tải
      window.onload = disableInputs;
    </script>
    <!-- async function fetchGVMLists() {
      try {
        const response = await fetch('/api/gvm');
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }

          const gvmLists = await response.json();
          return gvmLists;
        } catch (error) {
          console.error("Error fetching data:", error);
        }
      }
      /*
     function fetchGVMLists() {
      fetch('/api/gvm')
          .then(response => {
              if (!response.ok) {
                  throw new Error('Network response was not ok');
              }
              return response.json(); // Trả về Promise cho kết quả JSON
          })
          .then(gvmLists => {
              alert("Lấy thành công");
              return gvmLists; // Trả về danh sách giảng viên mời
          })
          .catch(error => {
              console.error('Error fetching data:', error); // Xử lý lỗi
          });
    }
    */

      async function viewClass(index) {
        gvmLists = await fetchGVMLists();

        var gvm = gvmLists[index];

        document.getElementById("modal-ma-gv").innerText = gvm.MaGvm;
        document.getElementById("modal-ho-ten").innerText = gvm.HoTen;
        document.getElementById("modal-ngay-sinh").innerText = new Date(
          gvm.NgaySinh
        ).toLocaleDateString("vi-VN");
        document.getElementById("modal-cccd").innerText = gvm.CCCD;
        document.getElementById("modal-ngay-cap").innerText = new Date(
          gvm.NgayCapCCCD
        ).toLocaleDateString("vi-VN");
        document.getElementById("modal-noi-cap").innerText = gvm.NoiCapCCCD;
        document.getElementById("modal-dia-chi-cccd").innerText = gvm.DiaChi;
        document.getElementById("modal-so-tk").innerText = gvm.STK;
        document.getElementById("modal-ngan-hang").innerText = gvm.NganHang;
        document.getElementById("modal-email").innerText = gvm.Email;
        document.getElementById("modal-heso-luong").innerText = gvm.HSL; 
        document.getElementById("modal-noi-cong-tac").innerText =
          gvm.NoiCongTac;
        document.getElementById("modal-chuc-vu").innerText = gvm.ChucVu;
        document.getElementById("modal-ma-so-thue").innerText = gvm.MaSoThue;
        // Hiển thị modal
        document.getElementById("modal").style.display = "flex";
      }

      // Đóng modal
      function closeModal() {
        document.getElementById("modal").style.display = "none";
      }

    // Thêm sự kiện khi nhấn ra ngoài modal để đóng modal
    window.onclick = function (event) {
      let modal = document.getElementById("modal");
      if (event.target == modal) {
        modal.style.display = "none";
      }
    }; -->

    <!-- </script> -->

    <script>
      // Lấy query string từ URL
      const urlParams = new URLSearchParams(window.location.search);
      const message = urlParams.get("message");

      // Lấy phần tử div để hiển thị thông báo
      const messageDiv = document.getElementById("message");

      // Hiển thị thông báo dựa trên giá trị của message
      if (message === "insertSuccess") {
        alert("Thành công!");
      } else if (message === "duplicateCCCD") {
        alert("Số CCCD đã tồn tại. Vui lòng kiểm tra lại số CCCD.");
      } else if (message === "insertFalse") {
        alert("Đã xảy ra lỗi trong quá trình thêm giảng viên.");
      }

      // Sau khi hiển thị thông báo, xóa query string để tránh hiển thị lại khi refresh
      if (message) {
        // Sử dụng window.history để xóa query string mà không refresh lại trang
        const newUrl = window.location.origin + window.location.pathname;
        window.history.replaceState({}, document.title, newUrl);
      }
    </script>

    <!-- Phần phân quyền -->
    <script>
      document.addEventListener("DOMContentLoaded", () => {

        // Thêm sự kiện click cho phần tử có id="ThongTinGD"
        const ThongTinGD = document.getElementById("ThongTinGD");

        ThongTinGD.addEventListener("click", function (event) {
          event.preventDefault(); // Ngăn chặn hành vi mặc định của liên kết

          const isKhoa = localStorage.getItem("isKhoa"); // Lấy role từ localStorage

          if (isKhoa == 0) {
            // Nếu là đào tạo hoặc tài chính
            window.location.href = "/info2";
          } else {
            window.location.href = "/info";
          }
        });

        // Thêm sự kiện click cho phần tử có id="Home"

        const Home = document.getElementById("Home");

        Home.addEventListener("click", function (event) {
          event.preventDefault(); // Ngăn chặn hành vi mặc định của liên kết

          const isKhoa = localStorage.getItem("isKhoa");

          if (isKhoa == 0) {
            // Nếu là đào tạo hoặc tài chính
            window.location.href = "/maindt";
          } else {
            window.location.href = "/mainkhoa";
          }
        });
      });
    </script>

    <script>
      window.onload = function () {
        const TenNhanVien = localStorage.getItem("TenNhanVien"); // Lấy tên người dùng từ localStorage
        const Role = localStorage.getItem("userRole");

        if (TenNhanVien) {
          // Hiển thị tên người dùng trên phần tử HTML
          document.querySelector(
            ".fullname"
          ).innerText = `${TenNhanVien} - ${Role}`;
        } else {
          document.querySelector(".fullname").innerText = "Hi, Guest"; // Hiển thị nếu không có tên người dùng
        }

        document.querySelector(".role").innerText = `${Role}`;
      };
    </script>

    <script>
      function filterClasses() {
        let filterValue = document.getElementById("filterByDepartment").value;
        let table = document.getElementById("classTable");
        let tr = table.getElementsByTagName("tr");

        for (let i = 1; i < tr.length; i++) { // Bỏ qua hàng tiêu đề
          let td = tr[i].getElementsByTagName("td")[4]; // Lấy mã giảng viên mời từ cột thứ 2
          if (td) {
            let textValue = td.textContent || td.innerText;

            // Nếu chọn "Tất cả" hoặc giá trị khớp với Mã Phòng Ban
            if (filterValue === "all" || textValue.startsWith(filterValue)) {
              tr[i].style.display = ""; // Hiển thị hàng
            } else {
              tr[i].style.display = "none"; // Ẩn hàng
            }
          }
        }
      }

    </script>
    <script>
      document.getElementById("changePasswordLink").addEventListener("click", function (event) {
        event.preventDefault(); // Ngăn chặn hành vi mặc định của thẻ a
        const tenDangNhap = localStorage.getItem("TenDangNhap"); // Lấy TenDangNhap từ localStorage
        alert(tenDangNhap);

        if (tenDangNhap) {
          // Chuyển hướng đến trang changePassword và truyền TenDangNhap trong URL
          window.location.href = `/changePassword?tenDangNhap=${encodeURIComponent(tenDangNhap)}`;
        } else {
          alert("Không tìm thấy TenDangNhap trong localStorage.");
        }
      });
    </script>


    <script>
      document.addEventListener('DOMContentLoaded', async function () {
        const MaPhongBan = localStorage.getItem("MaPhongBan");
        // alert(MaPhongBan);

        try {
          const response = await fetch('http://localhost:3000/bo-mon', {
            method: 'POST', // Thay đổi thành POST
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ MaPhongBan }) // Gửi MaPhongBan trong thân yêu cầu
          });

          if (!response.ok) {
            throw new Error(`Error: ${response.status} - ${response.statusText}`);
          }

          const data = await response.json(); // Chuyển đổi dữ liệu JSON
          localStorage.setItem('boMon', JSON.stringify(data));
          // Thêm vào bảng hoặc xử lý dữ liệu theo nhu cầu của bạn

        } catch (error) {
          console.error('Có lỗi xảy ra khi lấy dữ liệu bộ môn:', error);
        }
      });

      // Hàm gợi ý bộ môn ở ô nhập 
      function showSuggestionsBoMon(input) {
        const value = input.value.toLowerCase(); // Lấy giá trị nhập vào và chuyển thành chữ thường
        hideSuggestionsBoMon(); // Ẩn gợi ý cũ trước khi hiển thị gợi ý mới

        // Tạo thẻ div chứa gợi ý
        const suggestionsContainer = document.createElement('div');
        suggestionsContainer.className = 'suggestions'; // Đặt class cho khung gợi ý

        // Đặt vị trí cho suggestionsContainer
        const { bottom, left, width } = input.getBoundingClientRect(); // Lấy vị trí của input
        suggestionsContainer.style.position = 'absolute'; // Để đè lên bảng
        suggestionsContainer.style.top = `${bottom + window.scrollY}px`; // Đặt vị trí ngay dưới input
        suggestionsContainer.style.left = `${left + window.scrollX}px`; // Căn trái với input
        suggestionsContainer.style.width = `${width}px`; // Chiều rộng bằng với input
        suggestionsContainer.style.zIndex = '1000'; // Đảm bảo luôn hiển thị trên các thành phần khác
        suggestionsContainer.style.maxHeight = '200px'; // Giới hạn chiều cao để không quá lớn
        suggestionsContainer.style.overflowY = 'auto';  // Cho phép cuộn dọc nếu quá nhiều gợi ý

        // Thêm suggestionsContainer vào DOM
        document.body.appendChild(suggestionsContainer); // Đặt suggestionsContainer vào body thay vì cha của input

        let suggestions = []; // Khởi tạo mảng gợi ý

        // Lấy dữ liệu từ localStorage
        const boMon = JSON.parse(localStorage.getItem("boMon")) || []; // Giảng viên mời
        console.log(boMon)

        suggestions = boMon.map(item => `${item.TenBoMon} - ${item.MaBoMon}`);

        // Nếu người dùng nhập dữ liệu, lọc kết quả theo tên giảng viên
        if (value) {
          suggestions = suggestions.filter(name => name.toLowerCase().includes(value));
        }

        // Nếu không có gợi ý, ẩn container
        if (suggestions.length === 0) {
          suggestionsContainer.remove();
          return; // Kết thúc hàm nếu không có gợi ý
        }

        // Tạo gợi ý dưới dạng danh sách (list)
        suggestions.forEach(name => {
          const suggestionItem = document.createElement('div'); // Tạo phần tử cho từng gợi ý
          suggestionItem.className = 'suggestion-item'; // Đặt class để tùy chỉnh giao diện
          suggestionItem.textContent = name; // Hiển thị tên giảng viên kèm theo khoa

          // Thêm sự kiện click để điền tên vào ô input
          suggestionItem.onclick = function () {
            const name = suggestionItem.innerText; // Hoặc có thể là suggestionItem.textContent

            // Tìm vị trí của dấu "-" trong chuỗi
            const dashIndex = name.indexOf("-");

            // Nếu không có dấu "-", sử dụng tên gợi ý gốc
            let processedName = name;

            if (dashIndex !== -1) {
              // Lấy phần sau dấu "-" và loại bỏ khoảng trắng
              processedName = name.slice(dashIndex + 1).trim().replace(/\s+/g, '');
            }

            // Điền tên gợi ý đã xử lý vào ô input
            input.value = processedName;
            searchBoMon();
            hideSuggestionsBoMon(); // Ẩn gợi ý sau khi chọn
          };

          suggestionsContainer.appendChild(suggestionItem); // Thêm mục vào danh sách gợi ý
        });

        // Ẩn gợi ý khi input không còn focus
        input.onblur = function () {
          setTimeout(() => {
            hideSuggestionsBoMon();
          }, 100); // Thời gian chờ để nhận diện click
        };
      }

      // Hàm ẩn gợi ý
      function hideSuggestionsBoMon() {
        const existingSuggestions = document.querySelectorAll('.suggestions');
        existingSuggestions.forEach(suggestion => suggestion.remove());
      }

      // Hàm xử lý tìm kiếm theo tên bộ môn
      function filterBoMon() {
        const input = document.getElementById('filterBoMon');
        const filter = input.value.trim().toLowerCase(); // Bỏ khoảng trắng và chuyển chữ thường
        const tableRows = document.querySelectorAll('#tableBody tr');

        tableRows.forEach(row => {
          const nameInput = row.querySelector('td:nth-child(7) input[name="bomon"]'); // Lấy input có name="bomon" ở cột thứ 7
          const checkbox = row.querySelector('input[type="checkbox"]');

          if (nameInput) {
            const name = nameInput.value.toLowerCase(); // Lấy giá trị của input có name="bomon"

            if (filter === '' || name.includes(filter)) {
              row.style.display = ''; // Hiện hàng nếu khớp hoặc filter trống
              checkbox.disabled = false; // Kích hoạt checkbox
            } else {
              row.style.display = 'none'; // Ẩn hàng nếu không khớp
              checkbox.disabled = true; // Vô hiệu hóa checkbox
            }
          }
        });
      }
    </script>

</body>

</html>