<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Học Viện Kỹ Thuật Mật Mã</title>
  <link rel="stylesheet" href="/css/table.css">
  <link rel="stylesheet" href="/css/teachingInfo.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css">
  <link rel="stylesheet" href="/css/styles.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css">
  <style>
    .table>:not(caption)>*>* {
      border-bottom-width: 2px;
    }

    .table {
      border-color: #ffffff;
    }

    /* CSS để căn chỉnh label tổng số tiết */
    .total-label {
      margin-top: 10px;
      /* Khoảng cách với bảng */
      text-align: right;
      /* Căn phải */
    }

    .suggestions {
      background-color: #f0f0f0;
      /* Màu nền trắng xám */
      color: #000;
      /* Màu chữ đen */
      border: 1px solid #ccc;
      /* Đường viền mờ để tạo phân tách */
      box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
      /* Tạo bóng cho khung */
      z-index: 100000000000;
      /* Đảm bảo khung hiển thị đè lên bảng */
      border-radius: 4px;
      /* Bo tròn các góc */
      max-height: 300px;
      /* Giới hạn chiều cao tối đa cho danh sách gợi ý */
      overflow-y: auto;
      /* Tự động thêm cuộn khi danh sách quá dài */
      transition: background-color 0.3s, box-shadow 0.3s;
      /* Thêm hiệu ứng chuyển đổi */
    }

    /* Hiệu ứng lung linh khi hover */
    .suggestions:hover {
      background-color: #e0e0e0;
      /* Thay đổi màu nền khi hover */
      box-shadow: 0px 8px 16px rgba(0, 0, 0, 0.2);
      /* Tăng độ bóng khi hover */
    }


    /* CSS cho từng mục gợi ý */
    .suggestion-item {
      padding: 8px 12px;
      /* Khoảng cách bên trong từng mục */
      cursor: pointer;
      /* Con trỏ chuột thay đổi khi hover */
      transition: background-color 0.2s ease;
      /* Tạo hiệu ứng chuyển đổi mượt mà khi hover */
    }

    /* Hiệu ứng khi người dùng di chuột vào mục gợi ý */
    .suggestion-item:hover {
      background-color: #f0f0f0;
      /* Màu nền khi hover */
    }

    /* Đặt lại một số thuộc tính khi input mất focus */
    input:focus+.suggestions {
      display: block;
      /* Đảm bảo khung hiển thị khi input được focus */
    }

    /* Đảm bảo container gợi ý không bị tràn ra ngoài khung nếu có */
    .suggestions {
      overflow: hidden;
    }
  </style>
</head>

<body>

  <nav class="navbar-top ">
    <div class="container-fluid">
      <a class="navbar-brand" href="#">
        <img src="/Logo-Hoc-Vien-Ky-Thuat-Mat-Ma-ACTVN.webp" alt="Logo">
        <div class="navbar-title">
          <img src="/dongchu_banner.png" alt="banner">
        </div>
      </a>
    </div>
  </nav>

  <!-- Phần dưới của navbar chứa các mục nằm ngang -->

  <nav class="navbar navbar-expand-lg navbar-bottom sticky-top">
    <div class="" style="width: 100%;">
      <nav class="navbar navbar-expand-lg navbar-bottom sticky-top">
        <div class="container-fluid">
          <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav"
            aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
          </button>
          <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav">
              <li class="nav-item">
                <a class="nav-link" id="Home" href=""><i class="fa-solid fa-house"></i></a>
              </li>
              <div class="navbar-nav">
                <div class="nav-item dropdown">
                  <a class="nav-link dropdown-toggle" href="/login" id="navbarDropdownUser" data-bs-toggle="dropdown"
                    aria-expanded="false">
                    Giảng Viên Mời
                  </a>
                  <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                    <a class="nav-link" href="/gvmList">Danh sách giảng viên mời</a>
                    <a class="nav-link" id="Import" href="">Thêm bằng file</a>
                  </div>
                </div>
              </div>
              <div class="navbar-nav">
                <div class="nav-item dropdown">
                  <a class="nav-link dropdown-toggle active" href="/login" id="navbarDropdownUser"
                    data-bs-toggle="dropdown" aria-expanded="false">
                    Bảng Quy Chuẩn
                  </a>
                  <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                    <a class="nav-link" href="/tableTam">Bảng quy chuẩn dự kiến</a>
                    <a class="nav-link" href="/tableQC">Bảng quy chuẩn chính thức</a>
                    <a class="nav-link active" id="ThongTinGD" href="">Thông tin giảng viên theo lớp</a>
                  </div>
                </div>
              </div>
              <div class="navbar-nav">
                <div class="nav-item dropdown">
                  <a class="nav-link dropdown-toggle" href="/login" id="navbarDropdownUser" data-bs-toggle="dropdown"
                    aria-expanded="false">
                    Mời Giảng
                  </a>
                  <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                    <a class="nav-link" href="/xemCacLopGvm">Xem các lớp mời</a>

                    <a class="nav-link" href="/classInfoGvm">Thông tin lớp giảng viên mời</a>
                    <a class="nav-link " href="/infoHDGvm" role="button">Thông tin hợp đồng</a>
                  </div>
                </div>
              </div>
              <div class="navbar-nav">
                <div class="nav-item dropdown">
                  <a class="nav-link dropdown-toggle" href="/login" id="navbarDropdownUser" data-bs-toggle="dropdown"
                    aria-expanded="false">
                    Vượt Giờ
                  </a>
                  <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                    <a class="nav-link" id="ThongTinGD" href="#">COMING SOON</a>
                  </div>
                </div>
              </div>
              <div class="navbar-nav">
                <div class="nav-item dropdown">
                  <a class="nav-link dropdown-toggle" href="/login" id="navbarDropdownUser" data-bs-toggle="dropdown"
                    aria-expanded="false">
                    Nghiên Cứu Khoa Học
                  </a>
                  <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                    <a class="nav-link" id="ThongTinGD" href="#">COMING SOON</a>
                  </div>
                </div>
              </div>
              <div class="navbar-nav">
                <div class="nav-item dropdown">
                  <a class="nav-link dropdown-toggle" href="/login" id="navbarDropdownUser" data-bs-toggle="dropdown"
                    aria-expanded="false">
                    Đồ Án
                  </a>
                  <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                    <a class="nav-link" id="ThongTinGD" href="#">COMING SOON</a>
                  </div>
                </div>
              </div>
              <div class="navbar-nav">
                <div class="nav-item dropdown">
                  <a class="nav-link dropdown-toggle" href="/login" id="navbarDropdownUser" data-bs-toggle="dropdown"
                    aria-expanded="false">
                    Thống Kê
                  </a>
                  <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                    <a class="nav-link" id="ThongTinGD" href="#">COMING SOON</a>
                  </div>
                </div>
              </div>
            </ul>
            <div class="navbar-nav">
              <div class="nav-item dropdown">
                <a class="nav-link dropdown-toggle fullname" href="/login" id="navbarDropdownUser"
                  data-bs-toggle="dropdown" aria-expanded="false">
                  Hi, Lê Đức Thuận
                </a>
                <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                  <a class="dropdown-item" href="#">Thông tin cá nhân</a>
                  <a class="dropdown-item" href="/">Đăng xuất</a>
                </div>
              </div>
            </div>
            </ul>
          </div>
        </div>
      </nav>
    </div>
  </nav>
      <div class="container-fluid box m-4">
        <div class="">
          <div class="d-flex justify-content-between">
            <div class="d-flex justify-content-center">
              <select class="form-select w-100px mx-2 " id="combobox-dot">
                <option value="1">Đợt 1</option>
                <option value="2">Đợt 2</option>
              </select>

              <!-- Combo box Đợt -->
              <select class="form-select w-100px mx-2 " id="combobox-ki">
                <option value="1">Kì 1</option>
                <option value="2">Kì 2</option>
              </select>

              <!-- Combo box Năm -->
              <select class="form-select w-100px mx-2 " id="combobox-nam">
                <option value="2024">2024</option>
                <option value="2025">2025</option>
                <option value="2026">2026</option>
                <option value="2027">2027</option>
              </select>
              <button id="getData" class="button text-nowrap">Lấy dữ liệu</button>
              <button id="infoGvm" class="button text-nowrap">Xem dữ liệu</button>
              <button id="update-qc" onclick="updateLocalTable()" class="button mx-3">Lưu cục bộ</button>
              <button id="update-qc" onclick="submitData()" class="button mx-3">Gửi duyệt</button>
            </div>

          </div>


          <div class="d-flex my-3" style="height: 70px;">
            <input type="text" id="filterName" placeholder="Tìm theo giảng viên TKB" oninput="filterByName()"
              class="form-control m-2 search" style="width: 300px;" />
            <input type="text" id="filterClass" placeholder="Tìm theo tên học phần" oninput="filterByClass()"
              class="form-control m-2 search" style="width: 300px;" />
            <div class="input-group m-2" style="width: 350px;" id="batdau">
              <label for="startDate" class="input-group-text">Ngày bắt đầu</label>
              <input required type="date" id="startDate" class="form-control" />
            </div>
            <div class="input-group m-2" style="width: 350px;" id="ketthuc">

              <label for="endDate" class="input-group-text">Ngày kết thúc</label>
              <input required type="date" id="endDate" class="form-control" />
            </div>
            <button id="fillDay" class="button text-nowrap">Chèn ngày</button>


            <!-- <button class="button-action SapXep " id="sortTeachersByName">Sắp Xếp</button> -->


            <script>
              document.getElementById('sortTeachersByName').addEventListener('click', sortTeachersByName);

              function sortTeachersByName() {
                const tableBody = document.getElementById('tableBody');
                const rows = Array.from(tableBody.rows);

                // Loại bỏ hàng tiêu đề khỏi quá trình sắp xếp
                const dataRows = rows.slice(); // Lấy tất cả các hàng dữ liệu

                // Sắp xếp các hàng dữ liệu dựa trên tên giáo viên
                dataRows.sort((a, b) => {
                  const teacherA = a.cells[2].textContent.trim();
                  const teacherB = b.cells[2].textContent.trim();

                  // Sắp xếp theo tiêu chuẩn tiếng Việt
                  return teacherA.localeCompare(teacherB, 'vi', { sensitivity: 'base' });
                });

                // Xóa bảng và chèn lại các hàng dữ liệu đã sắp xếp
                tableBody.innerHTML = ''; // Xóa các hàng hiện có
                dataRows.forEach(row => tableBody.appendChild(row)); // Chèn lại các hàng dữ liệu đã sắp xếp
              }

            </script>

            <script>
              function sortTableByColumn(columnIndex, direction) {
                const tableBody = document.getElementById('tableBody');
                const rows = Array.from(tableBody.rows);

                rows.sort((a, b) => {
                  const cellA = a.cells[columnIndex].textContent.trim();
                  const cellB = b.cells[columnIndex].textContent.trim();

                  if (direction === 'asc') {
                    return cellA.localeCompare(cellB, 'vi', { sensitivity: 'base' });
                  } else {
                    return cellB.localeCompare(cellA, 'vi', { sensitivity: 'base' });
                  }
                });

                tableBody.innerHTML = ''; // Clear current rows
                rows.forEach(row => tableBody.appendChild(row)); // Append sorted rows
              }
            </script>

          </div>




          <div id="renderInfo">
            <table class="text-center">
              <thead>
                <tr>
                  <th style="width: 200px;">Học phần</th>
                  <th style="width: 50px;">Số TC</th>
                  <th style="width: 200px;">
                    <span onclick="sortTableByColumn(2, 'asc')">GV theo TKB</span>
                    <span class="sort-icon">
                      <i class="bi bi-arrow-up" onclick="sortTableByColumn(2, 'asc')"></i>
                      <i class="bi bi-arrow-down" onclick="sortTableByColumn(2, 'desc')"></i>
                    </span>
                  </th>
                  <th style="width: 50px;">Mời giảng?</th>
                  <th style="width: 100px;">GV giảng dạy</th>
                  <th style="width: 50px;">Khoa</th>
                  <th style="width: 100px;">Bộ môn</th>
                  <th style="width: 50px;">Số tiết LL</th>
                  <th style="width: 50px;">Số tiết QC</th>
                  <th style="width: 50px;">Ngày bắt đầu</th>
                  <th style="width: 50px;">Ngày kết thúc</th>
                  <th style="width: 50px; display: none" id="khoaColumn">
                    <div class="form-check">
                      Khoa
                      <input class="form-check-input" type="checkbox" id="checkAllKhoa" onclick="checkAll('khoa')">
                    </div>
                  </th>
          </div>
          </tr>
          </thead>
          <tbody id="tableBody">
            <tr>
              <td></td>
              <td></td>
              <td></td>
              <td></td>
              <td></td>
              <td></td>
              <td></td>
              <td></td>
              <td></td>
              <td id="ankhoa"></td>
            </tr>
          </tbody>
          </table>
        </div>
        <!-- Label tổng số tiết tách riêng với bảng -->
        <div class="total-label">
          <strong>Tổng số tiết LL: </strong><span id="totalLL">0</span> |
          <strong>Tổng số tiết QC: </strong><span id="totalQC">0</span>
        </div>
      </div>
    </div>


    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <!-- phần hiển thị phân theo role -->
    <script>
      // dùng window onclick đéo được
      document.addEventListener("DOMContentLoaded", function () {
        const role = localStorage.getItem("userRole");
        //alert(role ? role : "Vai trò người dùng là null.");

        // Chỉ cho nhập ngày bắt đầu ngày kết thúc với role thi hành
        // if (role && role.includes('GV_CNBM')) {
        //   document.getElementById('batdau').style.display = '';
        //   document.getElementById('ketthuc').style.display = '';
        // }

        // Nếu role là 1 trong 3 giá trị sau thì hiển thị cột, ngược lại thì ẩn
        if (role === 'Lãnh đạo khoa') {
          // Hiển thị cột 'khoaColumn'
          document.getElementById('khoaColumn').style.display = 'table-cell';
        } else {
          // Ẩn cột 'khoaColumn'
          document.getElementById('khoaColumn').style.display = 'none';
          document.getElementById('ankhoa').style.display = 'none';
        }
      });

    </script>

    <!-- phần chèn ngày bd kt cho tất cả các dòng khi nhấn Chèn -->
    <script>
      document.getElementById('fillDay').addEventListener('click', function () {
        // Lấy giá trị của ngày bắt đầu và ngày kết thúc
        const globalStartDate = document.getElementById('startDate').value;
        const globalEndDate = document.getElementById('endDate').value;

        // Kiểm tra nếu người dùng chưa nhập ngày
        if (!globalStartDate || !globalEndDate) {
          alert('Vui lòng nhập ngày bắt đầu và ngày kết thúc.');
          return;
        }

        // Lấy dữ liệu từ localStorage (giả sử dữ liệu được lưu dưới dạng JSON)
        let data = JSON.parse(localStorage.getItem('tableData')); // Nếu không có, tạo mảng trống
        // Cập nhật từng đối tượng trong dữ liệu
        data.forEach(item => {
          item.NgayBatDau = globalStartDate; // Cập nhật ngày bắt đầu
          item.NgayKetThuc = globalEndDate; // Cập nhật ngày kết thúc
        });

        // Lưu lại dữ liệu đã cập nhật vào localStorage
        localStorage.setItem('tableData', JSON.stringify(data));


        console.log('sau khi cập nhật ngày :', data);
        // lấy ra bảng 
        // let table = JSON.parse(localStorage.getItem('tableData')); // Nếu không có, tạo mảng trống


        // Thông báo cho người dùng
        alert('Đã chèn ngày cho tất cả các đối tượng.');
      });


    </script>

    <!-- phần render bảng dùng localStorage -->
    <script>

      var globalDataNew = [];

      // gọi hàm này sau khi đọc hết script
      function init() {
        document.getElementById('infoGvm').addEventListener('click', viewData);
        document.getElementById('getData').addEventListener('click', loadData);

      }

      function viewData() {
        // Nếu có sự thay đổi, cập nhật localStorage
        // localStorage.getItem('nameGv');
        // localStorage.getItem('nameGvm');
        let data = JSON.parse(localStorage.getItem('tableData'));
        renderTable(data);
        calculateTotals()
      }

      async function loadData() {
        try {
          // Lấy giá trị từ các combobox
          const dotValue = document.getElementById('combobox-dot').value;
          const kiValue = document.getElementById('combobox-ki').value;
          const namValue = document.getElementById('combobox-nam').value;

          // Tạo đối tượng dữ liệu để gửi
          const requestData = {
            Dot: dotValue,
            Ki: kiValue,
            Nam: namValue,
          };

          // Gọi API để lấy dữ liệu mới
          console.log('Gọi API lấy dữ liệu mới...');
          const [gvmResponse, khoaResponse, teachingResponse] = await Promise.all([
            fetch('http://localhost:3000/index/name-gvm'),
            fetch('http://localhost:3000/index/name-gvm-khoa'),
            fetch('http://localhost:3000/teaching-info', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify(requestData),
            }),
          ]);

          // Kiểm tra xem có lỗi trong các phản hồi không
          if (!gvmResponse.ok || !khoaResponse.ok || !teachingResponse.ok) {
            alert("Lỗi truy vấn!");
            return; // Dừng lại nếu có lỗi
          }

          // Lưu dữ liệu mới vào biến
          const nameGvNew = await gvmResponse.json();
          const nameGvmNew = await khoaResponse.json();
          const rs = await teachingResponse.json();

          // Thêm check
          globalDataNew = rs.results; // Dữ liệu kết quả
          // globalData = globalDataNew;
          const check = rs.check; // Dữ liệu check

          localStorage.setItem("check", check);

          // Kiểm tra dữ liệu trong localStorage
          let cachedData = localStorage.getItem('tableData');

          // Nếu có dữ liệu trong localStorage
          if (cachedData) {
            cachedData = JSON.parse(cachedData);
            // So sánh dữ liệu mới với dữ liệu cũ
            const isDataEqual = (JSON.stringify(cachedData) === JSON.stringify(globalDataNew));

            if (isDataEqual) {
              console.log('Dữ liệu không thay đổi, sử dụng dữ liệu từ localStorage');
              // Render bảng từ dữ liệu đã cache
              renderTable(cachedData);
              calculateTotals();
              return;
            }
          }

          // Nếu có sự thay đổi, cập nhật localStorage
          localStorage.setItem('nameGv', JSON.stringify(nameGvNew));
          localStorage.setItem('nameGvm', JSON.stringify(nameGvmNew));
          localStorage.setItem('tableData', JSON.stringify(globalDataNew));

        } catch (error) {
          console.error('Đã có lỗi xảy ra:', error);
        }
      }


      // render ra bảng
      function renderTable(data) {
        // Kiểm tra nếu đã có dữ liệu lưu trữ cục bộ trong localStorage


        const tableBody = document.getElementById('tableBody');
        tableBody.innerHTML = ''; // Xóa nội dung cũ

        const role = localStorage.getItem("userRole");
        const isKhoa = parseInt(localStorage.getItem("isKhoa"), 10); // Chuyển đổi isKhoa thành số
        const MaPhongBan = localStorage.getItem("MaPhongBan")

        data.forEach((row) => {
          const tableRow = document.createElement('tr');

          const lopHocPhanTd = document.createElement('td');
          lopHocPhanTd.textContent = `${row.LopHocPhan} (${row.TenLop})` || '';
          tableRow.appendChild(lopHocPhanTd);

          const soTcTd = document.createElement('td');
          soTcTd.textContent = row.SoTinChi || '';
          tableRow.appendChild(soTcTd);

          const giaoVienTd = document.createElement('td');
          giaoVienTd.textContent = row.GiaoVien || '';
          tableRow.appendChild(giaoVienTd);

          // Tạo một ô td cho checkbox
          const moiGiangTd = document.createElement('td');

          // Tạo checkbox
          const inviteCheckbox = document.createElement('input');
          inviteCheckbox.name = 'moigiang';
          inviteCheckbox.type = 'checkbox';
          inviteCheckbox.checked = row.MoiGiang || false;

          // Thêm checkbox vào ô td
          moiGiangTd.appendChild(inviteCheckbox);

          // Thêm ô td vào hàng bảng
          tableRow.appendChild(moiGiangTd);


          const giaoVienGiangDayTd = document.createElement('td');
          const giaoVienGiangDayInput = document.createElement('input');
          giaoVienGiangDayInput.type = 'text';
          giaoVienGiangDayInput.placeholder = 'Nhập tên giảng viên';
          giaoVienGiangDayInput.value = row.GiaoVienGiangDay || '';


          giaoVienGiangDayTd.appendChild(giaoVienGiangDayInput);
          tableRow.appendChild(giaoVienGiangDayTd);
          giaoVienGiangDayInput.onclick = () => {
            const moiGiang = inviteCheckbox.checked;
            showSuggestions(giaoVienGiangDayInput, moiGiang);
          };

          giaoVienGiangDayInput.oninput = () => {
            const moiGiang = inviteCheckbox.checked;
            showSuggestions(giaoVienGiangDayInput, moiGiang);
          };

          giaoVienGiangDayTd.appendChild(giaoVienGiangDayInput);
          tableRow.appendChild(giaoVienGiangDayTd);

          giaoVienGiangDayTd.appendChild(giaoVienGiangDayInput);
          tableRow.appendChild(giaoVienGiangDayTd);

          const khoaTd = document.createElement('td');
          khoaTd.textContent = row.Khoa || '';
          tableRow.appendChild(khoaTd);

          const boMonTd = document.createElement('td');
          const boMonInput = document.createElement('input');
          boMonInput.type = 'text';
          boMonInput.value = row.BoMon || '';
          boMonInput.placeholder = 'Nhập tên bộ môn';
          boMonTd.appendChild(boMonInput);
          tableRow.appendChild(boMonTd);

          const soTietLLTd = document.createElement('td');
          soTietLLTd.textContent = row.LL || '';
          tableRow.appendChild(soTietLLTd);

          const soTietQCTd = document.createElement('td');
          soTietQCTd.textContent = row.QuyChuan || '';
          tableRow.appendChild(soTietQCTd);

          // Cột Ngày Bắt Đầu
          const ngayBatDauTd = document.createElement('td');
          const ngayBatDauInput = document.createElement('input');
          ngayBatDauInput.type = 'date';
          ngayBatDauInput.name = 'startDate';
          ngayBatDauInput.value = formatDate(row.NgayBatDau); // Định dạng ngày
          ngayBatDauTd.appendChild(ngayBatDauInput);
          tableRow.appendChild(ngayBatDauTd);

          // Cột Ngày Kết Thúc
          const ngayKetThucTd = document.createElement('td');
          const ngayKetThucInput = document.createElement('input');
          ngayKetThucInput.type = 'date';
          ngayKetThucInput.name = 'endDate';
          ngayKetThucInput.value = formatDate(row.NgayKetThuc); // Định dạng ngày
          ngayKetThucTd.appendChild(ngayKetThucInput);
          tableRow.appendChild(ngayKetThucTd);


          let khoaCheckboxTd, khoaCheckbox;
          // Điều kiện ẩn checkbox Khoa nếu role không phải "CNTT_ALL"
          if (isKhoa === 1 && role === "Lãnh đạo khoa") {
            khoaCheckboxTd = document.createElement('td');
            khoaCheckbox = document.createElement('input');
            khoaCheckbox.type = 'checkbox';
            khoaCheckbox.name = 'khoa';
            khoaCheckbox.checked = row.KhoaDuyet || false;
            khoaCheckbox.onchange = () => updateCheckAll('khoa');
            khoaCheckboxTd.appendChild(khoaCheckbox);
            tableRow.appendChild(khoaCheckboxTd);
          }

      const check = localStorage.getItem("check");
      // Phân quyền theo phòng ban
      if (isKhoa == 1){ // Nếu là khoa
        if (check.includes(MaPhongBan)){
          inviteCheckbox.addEventListener('click', function(e){
            e.preventDefault();
          })

          giaoVienGiangDayInput.readOnly = true;
          boMonInput.readOnly = true;
          ngayBatDauInput.readOnly = true;
          // Ngăn người dùng thay đổi trạng thái ngày kết thúc
          ngayKetThucInput.readOnly = true;

          // Ngăn người dùng thay đổi trạng thái checkbox
          khoaCheckbox.addEventListener('click', function (e) {
            e.preventDefault(); // Ngăn người dùng thay đổi trạng thái checkbox
          });

          // Ngăn checkbox tổng của 'khoa' không cho thay đổi
          disableCheckAll('khoa');
        }
      } 

          // Thêm hàng vào body của bảng
          tableBody.appendChild(tableRow);
        });
      }

      function disableCheckAll(type) {
        const checkAllCheckbox = document.getElementById(`checkAll${type.charAt(0).toUpperCase() + type.slice(1)}`);
    
        if (checkAllCheckbox) {
            // Ngăn không cho người dùng thay đổi checkbox tổng
            checkAllCheckbox.addEventListener('click', function(e) {
                e.preventDefault(); // Ngăn thay đổi trạng thái
            });
        }
      }

      // xử lí hiển thị ngày tháng năm
      function formatDate(dateString) {
        if (!dateString) return 'N/A'; // Hoặc trả về giá trị mặc định
        const date = new Date(dateString);
        if (isNaN(date)) return 'N/A'; // Kiểm tra nếu ngày không hợp lệ
        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const day = String(date.getDate()).padStart(2, '0');
        return `${year}-${month}-${day}`; // Định dạng YYYY-MM-DD
      }

      // lưu bảng vào localStorage
      function saveTableToLocalStorage(data) {
        localStorage.setItem('tableData', JSON.stringify(data));
      }

      // Hàm hiển thị gợi ý đã được cập nhật
      function showSuggestions(input, moiGiang) {
        const value = input.value.toLowerCase(); // Lấy giá trị nhập vào và chuyển thành chữ thường
        hideSuggestions(); // Ẩn gợi ý cũ trước khi hiển thị gợi ý mới

        // Tạo thẻ div chứa gợi ý
        const suggestionsContainer = document.createElement('div');
        suggestionsContainer.className = 'suggestions'; // Đặt class cho khung gợi ý

        // Đặt vị trí cho suggestionsContainer
        const { bottom, left, width } = input.getBoundingClientRect(); // Lấy vị trí của input
        suggestionsContainer.style.position = 'absolute'; // Để đè lên bảng
        suggestionsContainer.style.top = `${bottom + window.scrollY} px;` // Đặt vị trí dưới input
        suggestionsContainer.style.left = `${left + window.scrollX} px;` // Căn trái với input
        suggestionsContainer.style.width = `${width}px;` // Chiều rộng bằng với input
        suggestionsContainer.style.zIndex = '100000000000'; // Hiện lên cho tao

        // Thêm tính năng cuộn khi có quá nhiều gợi ý
        suggestionsContainer.style.overflowY = 'auto';  // Cho phép cuộn dọc

        input.parentElement.appendChild(suggestionsContainer); // Thêm suggestionsContainer vào DOM

        let suggestions = []; // Khởi tạo mảng gợi ý

        // Lấy dữ liệu từ localStorage
        const nameGvm = JSON.parse(localStorage.getItem("nameGvm")) || []; // Giảng viên mời
        const nameGv = JSON.parse(localStorage.getItem("nameGv")) || []; // Giảng viên

        // Kiểm tra giá trị moiGiang để xác định dữ liệu nào sẽ hiển thị
        if (moiGiang) {
          // Hiển thị toàn bộ giảng viên mời
          suggestions = nameGvm.map(item => `${item.HoTen} - ${item.MaPhongBan}`);
        } else {
          // Hiển thị toàn bộ giảng viên
          suggestions = nameGv.map(item => `${item.TenNhanVien} - ${item.MaPhongBan}`);
        }

        // Nếu người dùng nhập dữ liệu, lọc kết quả theo tên giảng viên
        if (value) {
          suggestions = suggestions.filter(name => name.toLowerCase().includes(value));
        }

        // Nếu suggestions vẫn rỗng, ẩn container
        if (suggestions.length === 0) {
          suggestionsContainer.remove(); // Ẩn container nếu không có gợi ý
          return; // Kết thúc hàm nếu không có gợi ý
        }
        // Tạo gợi ý dưới dạng danh sách (list)
        suggestions.forEach(name => {
          const suggestionItem = document.createElement('div'); // Tạo phần tử cho từng gợi ý
          suggestionItem.className = 'suggestion-item'; // Đặt class để tùy chỉnh giao diện
          suggestionItem.textContent = name; // Hiển thị tên giảng viên kèm theo khoa

          // Thêm sự kiện click để điền tên vào ô input
          suggestionItem.onclick = function () {
            input.value = name; // Điền tên gợi ý vào ô input
            hideSuggestions(); // Ẩn gợi ý sau khi chọn
          };

          suggestionsContainer.appendChild(suggestionItem); // Thêm mục vào danh sách gợi ý
        });

        // Ẩn gợi ý khi input không còn focus
        input.onblur = function () {
          setTimeout(() => {
            hideSuggestions();
          }, 100); // Thời gian chờ để nhận diện click
        };
      }

      // Hàm ẩn gợi ý
      function hideSuggestions() {
        const suggestionsContainer = document.querySelector('.suggestions');
        if (suggestionsContainer) {
          suggestionsContainer.remove();
        }
      }

      // Hàm xử lí : ấn lưu dữ liệu sẽ cập nhật vào localStorage, db chưa thay đổi
      function updateLocalTable() {
        const rows = document.querySelectorAll('#tableBody tr'); // Lấy tất cả các hàng trong bảng

        // Lấy dữ liệu từ localStorage nếu có
        let data = localStorage.getItem('tableData');
        let localData = JSON.parse(data);

        rows.forEach((row, index) => {
          // Bỏ qua các hàng đang bị ẩn
          if (row.style.display === 'none') {
            return;
          }

          // Lấy các giá trị từ các ô nhập và checkbox
          const giaoVienGiangDayInput = row.querySelector('input[type="text"][placeholder="Nhập tên giảng viên"]');
          const boMonInput = row.querySelector('input[type="text"][placeholder="Nhập tên bộ môn"]');
          const moiGiangCheckbox = row.querySelector('input[type="checkbox"][name="moigiang"]');
          const khoaCheckbox = row.querySelector('input[type="checkbox"][name="khoa"]');

          // Lấy giá trị từ các ô nhập liệu
          const giaoVienGiangDay = giaoVienGiangDayInput ? giaoVienGiangDayInput.value : '';
          const boMon = boMonInput ? boMonInput.value : '';

          // Lấy trạng thái của checkbox "Khoa" và "Đào Tạo"
          const khoaDuyet = khoaCheckbox ? khoaCheckbox.checked : false;
          const moiGiang = moiGiangCheckbox ? moiGiangCheckbox.checked : false;

          // Lấy giá trị của các ô ngày bắt đầu và kết thúc
          const ngayBatDauInput = row.querySelector('input[type="date"][name="startDate"]');
          const ngayKetThucInput = row.querySelector('input[type="date"][name="endDate"]');

          const ngayBatDauValue = ngayBatDauInput ? ngayBatDauInput.value : '';
          const ngayKetThucValue = ngayKetThucInput ? ngayKetThucInput.value : '';


          // So sánh và cập nhật nếu cần
          const currentNgayBatDau = localData[index].NgayBatDau || '';
          const currentNgayKetThuc = localData[index].NgayKetThuc || '';

          // Cập nhật vào dữ liệu cục bộ 
          if (currentNgayBatDau == '' || currentNgayBatDau != ngayBatDauValue) {
            localData[index].NgayBatDau = ngayBatDauValue; // Cập nhật ngày bắt đầu nếu cần
          }

          if (currentNgayKetThuc == '' || currentNgayKetThuc != ngayKetThucValue) {
            localData[index].NgayKetThuc = ngayKetThucValue; // Cập nhật ngày kết thúc nếu cần
          }

          // Cập nhật các giá trị khác không thay đổi
          localData[index].GiaoVienGiangDay = giaoVienGiangDay;
          localData[index].BoMon = boMon;
          localData[index].KhoaDuyet = khoaDuyet;
          localData[index].MoiGiang = moiGiang;
        });

        // Cập nhật lại localStorage với dữ liệu mới
        localStorage.setItem('tableData', JSON.stringify(localData));

        // Hiển thị thông báo thành công
        alert('Lưu thành công');
      }

      // gọi hàm init
      init();
    </script>

    <!-- các hàm phụ xử lí trong bảng -->
    <script>
      // Hàm tính tổng số tiết từ globalData
      function calculateTotals() {
        totalLL = 0; // Reset tổng số tiết LL
        totalQC = 0; // Reset tổng số tiết QC

        // Duyệt qua từng phần tử trong globalData để cộng dồn số tiết
        globalDataNew.forEach(item => {
          totalLL += item.LL; // Cộng dồn số tiết LL
          totalQC += item.QuyChuan; // Cộng dồn số tiết QC
        });

        // Cập nhật tổng số tiết vào HTML
        document.getElementById('totalLL').textContent = totalLL;
        document.getElementById('totalQC').textContent = totalQC;
      }


      // xử lí tìm theo tên
      function filterByName() {
        const input = document.getElementById('filterName');
        const filter = input.value.toLowerCase();
        const tableRows = document.querySelectorAll('#tableBody tr');

        // Nếu ô tìm kiếm trống, hiển thị tất cả các dòng
        if (!filter) {
          tableRows.forEach(row => {
            row.style.display = ''; // Hiện tất cả các dòng
            const checkbox = row.querySelector('input[type="checkbox"]');
            checkbox.disabled = false; // Kích hoạt checkbox
          });
          return;
        }

        // Chỉ hiện các dòng có tên giảng viên khớp với giá trị tìm kiếm
        tableRows.forEach(row => {
          const nameCell = row.querySelector('td:nth-child(3)'); // Giả sử tên giảng viên nằm ở cột thứ 5
          const name = nameCell.textContent.toLowerCase();
          const checkbox = row.querySelector('input[type="checkbox"]');

          if (name.includes(filter)) {
            row.style.display = ''; // Hiện hàng nếu khớp
            checkbox.disabled = false; // Kích hoạt checkbox
          } else {
            row.style.display = 'none'; // Ẩn hàng nếu không khớp
            checkbox.disabled = true; // Vô hiệu hóa checkbox
          }
        });
      }

      // xử lí tìm theo lớp
      function filterByClass() {
        const input = document.getElementById('filterClass');
        const filter = input.value.toLowerCase();
        const tableRows = document.querySelectorAll('#tableBody tr');

        // Nếu ô tìm kiếm trống, hiển thị tất cả các dòng
        if (!filter) {
          tableRows.forEach(row => {
            row.style.display = ''; // Hiện tất cả các dòng
            const checkbox = row.querySelector('input[type="checkbox"]');
            checkbox.disabled = false; // Kích hoạt checkbox
          });
          return;
        }

        // Chỉ hiện các dòng có tên giảng viên khớp với giá trị tìm kiếm
        tableRows.forEach(row => {
          const nameCell = row.querySelector('td:nth-child(1)'); // Giả sử tên giảng viên nằm ở cột thứ 5
          const name = nameCell.textContent.toLowerCase();
          const checkbox = row.querySelector('input[type="checkbox"]');

          if (name.includes(filter)) {
            row.style.display = ''; // Hiện hàng nếu khớp
            checkbox.disabled = false; // Kích hoạt checkbox
          } else {
            row.style.display = 'none'; // Ẩn hàng nếu không khớp
            checkbox.disabled = true; // Vô hiệu hóa checkbox
          }
        });
      }

      // hàm check All
      function checkAll(type) {
        const checkboxes = document.querySelectorAll(`input[type="checkbox"][name="${type}"]`);
        const checkAllCheckbox = document.getElementById(`checkAll${type.charAt(0).toUpperCase() + type.slice(1)}`);

        checkboxes.forEach(checkbox => {
          checkbox.checked = checkAllCheckbox.checked; // Gán trạng thái checkbox "Check All" cho tất cả các checkbox
        });
      }


      // hàm xử lí check all 
      function updateCheckAll(type) {
        const checkboxes = document.querySelectorAll(`input[type="checkbox"][name="${type}"]`);
        const checkAllCheckbox = document.getElementById(`checkAll${type.charAt(0).toUpperCase() + type.slice(1)}`);

        // Kiểm tra nếu tất cả checkbox cá nhân đều được chọn
        const allChecked = Array.from(checkboxes).every(checkbox => checkbox.checked);
        checkAllCheckbox.checked = allChecked; // Cập nhật trạng thái của checkbox "Check All"
      }

      // Hàm đẩy dữ liệu lên server 
      function submitData() {
        // Lấy bảng tableData từ localStorage
        const tableData = localStorage.getItem('tableData');

        // Kiểm tra xem dữ liệu có tồn tại hay không
        if (!tableData) {
          alert('Không tìm thấy dữ liệu trong localStorage.');
          return;
        }

        // Chuyển đổi dữ liệu từ chuỗi JSON thành đối tượng
        const globalData = JSON.parse(tableData);

        // Gửi dữ liệu lên server
        fetch('http://localhost:3000/check-teaching', {
          method: 'POST', // Phương thức POST
          headers: {
            'Content-Type': 'application/json' // Định dạng gửi là JSON
          },
          body: JSON.stringify(globalData) // Chuyển đổi globalData thành chuỗi JSON
        })
          .then(response => {
            if (!response.ok) {
              throw new Error('Lỗi khi gửi dữ liệu');
            }
            return response.json(); // Chuyển đổi phản hồi thành JSON
          })
          .then(data => {
            // Hiển thị thông báo từ server
            alert(data.message);

            // Load lại trang sau khi nhận được phản hồi
            //location.reload();
          })
          .catch(error => {
            console.error('Có lỗi xảy ra:', error);
            alert('Có lỗi xảy ra khi cập nhật dữ liệu.');
          });

      }


    </script>


    <!-- Phần phân quyền -->
    <script>
      document.addEventListener('DOMContentLoaded', () => {
        // Thêm sự kiện click cho phần tử có id "import"
        const importLink = document.getElementById("Import");

        importLink.addEventListener("click", function (event) {
          event.preventDefault(); // Ngăn chặn hành vi mặc định của liên kết

          const isKhoa = localStorage.getItem("isKhoa"); // Lấy role từ localStorage

          if (isKhoa == 0) { // Nếu là đào tạo hoặc tài chính
            window.location.href = "/import";
          } else { // Nếu là khoa
            window.location.href = "/importGvmList";
          }
        });

        // Thêm sự kiện click cho phần tử có id="ThongTinGD"
        const ThongTinGD = document.getElementById("ThongTinGD");

        ThongTinGD.addEventListener("click", function (event) {
          event.preventDefault(); // Ngăn chặn hành vi mặc định của liên kết

          const isKhoa = localStorage.getItem("isKhoa"); // Lấy role từ localStorage

          if (isKhoa == 0) { // Nếu là đào tạo hoặc tài chính
            window.location.href = "/info2";
          } else {
            window.location.href = "/info";
          }
        });

        // Thêm sự kiện click cho phần tử có id="Home"

        const Home = document.getElementById("Home");

        Home.addEventListener("click", function (event) {
          event.preventDefault(); // Ngăn chặn hành vi mặc định của liên kết

          const isKhoa = localStorage.getItem("isKhoa")

          if (isKhoa == 0) { // Nếu là đào tạo hoặc tài chính
            window.location.href = "/maindt";
          } else {
            window.location.href = "/mainkhoa";
          }
        });
      });

    </script>

    <script>
      window.onload = function () {
        const TenNhanVien = localStorage.getItem("TenNhanVien"); // Lấy tên người dùng từ localStorage
        const Role = localStorage.getItem("userRole");

        if (TenNhanVien) {
          // Hiển thị tên người dùng trên phần tử HTML
          document.querySelector('.fullname').innerText = `${TenNhanVien} - ${Role}`;
        } else {
          document.querySelector('.fullname').innerText = 'Hi, Guest'; // Hiển thị nếu không có tên người dùng
        }

        //document.querySelector('.role').innerText = `${Role}`;

      };
    </script>
</body>

</html>