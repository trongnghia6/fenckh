<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Học Viện Kỹ Thuật Mật Mã</title>
  <link rel="stylesheet" href="/css/teachingInfo.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css">
  <link rel="stylesheet" href="/css/styles.css">
  <style>
    .suggestions {
      position: absolute;
      background-color: white;
      border: 1px solid #ccc;
      border-radius: 4px;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
      z-index: 1000;
      max-height: 200px;
      overflow-y: auto;
    }

    .suggestion-item {
      padding: 10px;
      cursor: pointer;
    }

    .suggestion-item:hover {
      background-color: #f0f0f0;
    }

    /* CSS để căn chỉnh label tổng số tiết */
    .total-label {
      margin-top: 10px;
      /* Khoảng cách với bảng */
      text-align: right;
      /* Căn phải */
    }
  </style>
</head>

<body>
  <div class="fixed-top">
    <nav class="navbar-top ">
      <div class="container-fluid">
        <a class="navbar-brand" href="#">
          <img src="/Logo-Hoc-Vien-Ky-Thuat-Mat-Ma-ACTVN.webp" alt="Logo">
          <div class="navbar-title">
            <img src="/dongchu_banner.png" alt="banner">
          </div>
        </a>
      </div>
    </nav>

    <!-- Phần dưới của navbar chứa các mục nằm ngang -->
    <nav class="navbar navbar-expand-lg navbar-bottom">
      <div class="container-fluid">
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav"
          aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
          <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse justify-content-center" id="navbarNav">
          <ul class="navbar-nav">
            <li class="nav-item">
              <a class="nav-link" href="/maindt">HOME</a>
            </li>

            <li class="nav-item">
              <a class="nav-link" onclick="ThongTinGD()" href="">Thông tin GD</a>
            </li>
            <!-- <li> -->
            <li class="nav-item">
              <!-- <a class="nav-link" href="/import">Import danh sách giảng viên mời</a> -->
              <a class="nav-link" onclick="Import()" href="">Import</a>
            </li>

            <li class="nav-item">
              <a class="nav-link" href="/gvmList">Danh sách giảng viên mời</a>
            </li>

            <li class="nav-item">
              <a class="nav-link" href="/classInfoGvm">Thông tin lớp giảng viên mời</a>
            </li>

            <!-- <li class="nav-item">
              <a class="nav-link" href="#">Duyệt</a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="/maindt/tableQC">Bảng quy chuẩn</a>
            </li> -->
            <div class="navbar-nav">
              <div class="nav-item dropdown">
                <a class="nav-link dropdown-toggle" href="/login" id="navbarDropdownUser" data-bs-toggle="dropdown"
                  aria-expanded="false">
                  Hi, Lê Đức Thuận
                </a>
                <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                  <a class="dropdown-item" href="#">Thông tin cá nhân</a>
                  <a class="dropdown-item" href="/">Đăng xuất</a>
                </div>
              </div>
            </div>
          </ul>
        </div>
      </div>
    </nav>
  </div>

  <div class="container my-4 mg-top" style="max-width: max-content;">
    <div class="" style="width:1300px;">
      <div class="d-flex align-items-center">
        <select class="form-select w-100px mx-2 selectop" id="combobox-dot">
          <option value="1">Đợt 1</option>
          <option value="2">Đợt 2</option>
        </select>

        <!-- Combo box Đợt -->
        <select class="form-select w-100px mx-2 selectop" id="combobox-ki">
          <option value="1">Kì 1</option>
          <option value="2">Kì 2</option>
        </select>

        <!-- Combo box Năm -->
        <select class="form-select w-100px mx-2 selectop" id="combobox-nam">
          <option value="2024">2024</option>
          <option value="2025">2025</option>
          <option value="2026">2026</option>
          <option value="2027">2027</option>
        </select>
        <button id="infoGvm" class="button text-nowrap">Xem dữ liệu giảng viên</button>
      </div>

      <div class="d-flex my-3">
        <div class="input-group mx-2" style="width: 350px;">
          <label for="startDate" class="input-group-text">Ngày bắt đầu</label>
          <input type="date" id="startDate" class="form-control" />
        </div>
        <div class="input-group mx-2" style="width: 350px;">
          <label for="endDate" class="input-group-text">Ngày kết thúc</label>
          <input type="date" id="endDate" class="form-control" />
        </div>
      </div>
      <button onclick="submitData()" class="button mx-3">Gửi đào tạo</button>
      <div class="d-flex">
        <input type="text" id="filterName" placeholder="Tìm theo giảng viên TKB" oninput="filterByName()"
          class="form-control m-2 search" style="width: 300px;" />
        <input type="text" id="filterClass" placeholder="Tìm theo tên học phần" oninput="filterByClass()"
          class="form-control m-2 search" style="width: 300px;" />
      </div>

      <div id="renderInfo">
        <table class="table table-bordered table-hover">
          <thead>
            <tr>
              <th style="width: 200px;">Học phần</th>
              <th style="width: 50px;">Số TC</th>
              <th style="width: 200px;">GV theo TKB</th>
              <th style="width: 50px;">GV mời?</th>
              <th style="width: 100px;">GV giảng dạy</th>
              <th style="width: 50px;">Khoa</th>
              <th style="width: 100px;">Bộ môn</th>
              <th style="width: 50px;">Số tiết LL</th>
              <th style="width: 50px;">Số tiết QC</th>
              <th style="width: 50px;">
                <div class="form-check">
                  <input class="form-check-input" type="checkbox" id="checkAllKhoa" onclick="checkAll('khoa')">
                  <label class="form-check-label" for="checkAllKhoa">Khoa</label>
                </div>
              </th>
              <!-- <th style="width: 50px;">
                <div class="form-check">
                  <input class="form-check-input" type="checkbox" id="checkAllDaoTao" onclick="checkAll('daoTao')">
                  <label class="form-check-label text-nowrap" for="checkAllDaoTao">Đào Tạo</label>
                </div>
              </th>
              <th style="width: 50px;">
                <div class="form-check">
                  <input class="form-check-input" type="checkbox" id="checkAllTaiChinh" onclick="checkAll('taiChinh')">
                  <label class="form-check-label text-nowrap" for="checkAllTaiChinh">Tài Chính</label>
                </div>
              </th> -->
            </tr>
          </thead>
          <tbody id="tableBody">
            <tr>
              <td></td>
              <td></td>
              <td></td>
              <td></td>
              <td></td>
              <td></td>
              <td></td>
              <td></td>
              <td></td>
              <td></td>
              <td></td>
              <td></td>
            </tr>
          </tbody>
        </table>
      </div>
      <!-- Label tổng số tiết tách riêng với bảng -->
      <div class="total-label">
        <strong>Tổng số tiết LL: </strong><span id="totalLL">0</span> |
        <strong>Tổng số tiết QC: </strong><span id="totalQC">0</span>
      </div>
    </div>
  </div>
</body>

</html>


<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>



<script>
  let globalData = []; // Biến toàn cục để lưu dữ liệu từ server
  let nameGv = []; // Biến toàn cục để lưu tất cả tên giảng viên
  let nameGvm = []; // Biến toàn cục để lưu tên giảng viên theo khoa

  // Hàm khởi động ứng dụng
  function init() {
    document.getElementById('infoGvm').addEventListener('click', loadData);
  }

  async function loadData() {
    try {
      // Lấy giá trị từ các combobox
      const dotValue = document.getElementById('combobox-dot').value;
      const kiValue = document.getElementById('combobox-ki').value;
      const namValue = document.getElementById('combobox-nam').value;



      // Tạo đối tượng dữ liệu để gửi
      const requestData = {
        Dot: dotValue,
        Ki: kiValue,
        Nam: namValue,
      };


      // Fetch tên giảng viên mời
      const [gvmResponse, khoaResponse, teachingResponse] = await Promise.all([
        fetch('http://localhost:3000/index/name-gvm'),
        fetch('http://localhost:3000/index/name-gvm-khoa'),
        fetch('http://localhost:3000/teaching-info', {
          method: 'POST', // Sử dụng phương thức POST
          headers: {
            'Content-Type': 'application/json', // Đặt Content-Type là application/json
          },
          body: JSON.stringify(requestData), // Chuyển đổi đối tượng thành chuỗi JSON
        }),
      ]);


      if (!gvmResponse.ok || !khoaResponse.ok || !teachingResponse.ok) {
        alert("Lỗi truy vấn!")
      }

      // Lưu dữ liệu giảng viên cùng với mã phòng ban
      nameGv = await gvmResponse.json();
      console.log('Dữ liệu giảng viên trường :', nameGv); // Kiểm tra dữ liệu

      nameGvm = await khoaResponse.json();
      console.log('Dữ liệu giảng viên mời theo khoa:', nameGvm);

      globalData = await teachingResponse.json();
      console.log('Tổng hợp bảng dữ liệu:', globalData[0]);
      // console.table(globalData);

      renderTable(globalData); // Gọi hàm renderTable sau khi đã có đủ dữ liệu


      calculateTotals();
    } catch (error) {
      console.error('Đã có lỗi xảy ra:', error);
    }
  }

  function showSuggestions(input, inviteCheckbox) {
    const value = input.value.toLowerCase(); // Lấy giá trị nhập vào và chuyển thành chữ thường
    hideSuggestions(); // Ẩn gợi ý cũ trước khi hiển thị gợi ý mới

    // Tạo thẻ div chứa gợi ý
    const suggestionsContainer = document.createElement('div');
    suggestionsContainer.className = 'suggestions';

    // Đặt vị trí cho suggestionsContainer
    const { bottom, left, width } = input.getBoundingClientRect(); // Lấy vị trí của input
    suggestionsContainer.style.position = 'absolute'; // Để đè lên bảng
    suggestionsContainer.style.top = `${bottom + window.scrollY}px`; // Đặt vị trí dưới input
    suggestionsContainer.style.left = `${left + window.scrollX}px`; // Căn trái với input
    suggestionsContainer.style.width = `${width}px`; // Chiều rộng bằng với input
    input.parentElement.appendChild(suggestionsContainer);

    let suggestions = [];

    // Trường hợp checkbox được check
    if (inviteCheckbox.checked) {
      // Hiển thị toàn bộ giảng viên mời
      suggestions = nameGvm.map(item => `${item.HoTen} - ${item.MaPhongBan}`);
    } else {
      // Hiển thị toàn bộ giảng viên
      suggestions = nameGv.map(item => `${item.TenNhanVien} - ${item.MaPhongBan}`);
    }

    // Nếu người dùng nhập dữ liệu, lọc kết quả theo tên giảng viên
    if (value) {
      suggestions = suggestions.filter(name => name.toLowerCase().includes(value));
    }

    // Nếu suggestions vẫn rỗng, thông báo cho người dùng
    if (suggestions.length === 0) {
      suggestionsContainer.remove(); // Ẩn container nếu không có gợi ý
      return; // Kết thúc hàm nếu không có gợi ý
    }

    // Tạo gợi ý dưới dạng danh sách (list)
    suggestions.forEach(name => {
      const suggestionItem = document.createElement('div');
      suggestionItem.className = 'suggestion-item'; // Đặt class để tùy chỉnh giao diện
      suggestionItem.textContent = name; // Hiển thị tên giảng viên kèm theo khoa

      suggestionItem.onclick = function () {
        // console.log(name); // Log tên giảng viên khi người dùng chọn gợi ý
        input.value = name; // Gán tên được chọn vào ô input
        hideSuggestions(); // Ẩn danh sách gợi ý sau khi chọn
      };

      suggestionsContainer.appendChild(suggestionItem); // Thêm mục vào danh sách gợi ý
    });

    // Ẩn gợi ý khi input không còn focus
    input.onblur = function () {
      setTimeout(() => {
        hideSuggestions();
      }, 100); // Thời gian chờ để nhận diện click
    };
  }

  // Hàm render bảng
  function renderTable(data) {
    const tableBody = document.getElementById('tableBody');
    tableBody.innerHTML = ''; // Xóa nội dung cũ

    data.forEach((row) => {
      const tableRow = document.createElement('tr');

      const lopHocPhanTd = document.createElement('td');
      lopHocPhanTd.textContent = `${row.LopHocPhan} (${row.TenLop})` || '';
      tableRow.appendChild(lopHocPhanTd);

      const soTcTd = document.createElement('td');
      soTcTd.textContent = row.SoTinChi || '';
      tableRow.appendChild(soTcTd);

      const giaoVienTd = document.createElement('td');
      giaoVienTd.textContent = row.GiaoVien || '';
      tableRow.appendChild(giaoVienTd);

      const moiGiangTd = document.createElement('td');
      const inviteCheckbox = document.createElement('input');
      inviteCheckbox.name = 'moigiang'; // Thêm thuộc tính name
      inviteCheckbox.type = 'checkbox';
      inviteCheckbox.checked = row.MoiGiang || false;

      // Sự kiện khi checkbox thay đổi
      inviteCheckbox.onchange = () => {
        if (inviteCheckbox.checked) {
          // Hiển thị gợi ý nếu checkbox được chọn
          showSuggestions(giaoVienGiangDayInput, inviteCheckbox); // Gọi hàm để hiển thị gợi ý
        } else {
          // Nếu checkbox không được chọn, ẩn gợi ý
          hideSuggestions();
          giaoVienGiangDayInput.value = ''; // Tùy chọn: xóa ô nhập liệu nếu checkbox không được chọn
        }
      };

      moiGiangTd.appendChild(inviteCheckbox);
      tableRow.appendChild(moiGiangTd);

      const giaoVienGiangDayTd = document.createElement('td');
      const giaoVienGiangDayInput = document.createElement('input');
      giaoVienGiangDayInput.type = 'text';
      giaoVienGiangDayInput.placeholder = 'Nhập tên giảng viên';
      giaoVienGiangDayInput.value = row.GiaoVienGiangDay || '';

      // Cập nhật sự kiện input cho ô nhập giảng viên
      giaoVienGiangDayInput.oninput = () => {
        showSuggestions(giaoVienGiangDayInput, inviteCheckbox);
      };

      // Cập nhật sự kiện click cho ô nhập giảng viên
      giaoVienGiangDayInput.onclick = function () {
        showSuggestions(giaoVienGiangDayInput, inviteCheckbox);
      };

      giaoVienGiangDayTd.appendChild(giaoVienGiangDayInput);
      tableRow.appendChild(giaoVienGiangDayTd);

      const khoaTd = document.createElement('td');
      khoaTd.textContent = row.Khoa || ''; // Lấy giá trị Khoa trực tiếp từ row
      tableRow.appendChild(khoaTd);

      const boMonTd = document.createElement('td'); // Tạo ô Bộ môn
      const boMonInput = document.createElement('input'); // Tạo input cho Bộ môn
      boMonInput.type = 'text'; // Đặt loại là text
      boMonInput.value = row.BoMon || ''; // Lấy giá trị từ row
      boMonInput.placeholder = 'Nhập tên bộ môn'; // Thêm placeholder nếu cần
      boMonTd.appendChild(boMonInput); // Thêm input vào ô
      tableRow.appendChild(boMonTd);

      const soTietLLTd = document.createElement('td');
      soTietLLTd.textContent = row.LL || '';
      tableRow.appendChild(soTietLLTd);

      const soTietQCTd = document.createElement('td');
      soTietQCTd.textContent = row.QuyChuan || '';
      tableRow.appendChild(soTietQCTd);

      // Checkbox cho Khoa
      const khoaCheckboxTd = document.createElement('td');
      const khoaCheckbox = document.createElement('input');
      khoaCheckbox.type = 'checkbox';
      khoaCheckbox.name = 'khoa'; // Thêm thuộc tính name
      khoaCheckbox.checked = row.KhoaDuyet || false; // Dùng một trường cho checkbox
      khoaCheckbox.onchange = () => updateCheckAll('khoa'); // Gọi hàm khi checkbox thay đổi
      khoaCheckboxTd.appendChild(khoaCheckbox);
      tableRow.appendChild(khoaCheckboxTd);

      // // Checkbox cho Đào Tạo
      // const daoTaoCheckboxTd = document.createElement('td');
      // const daoTaoCheckbox = document.createElement('input');
      // daoTaoCheckbox.type = 'checkbox';
      // daoTaoCheckbox.name = 'daoTao'; // Thêm thuộc tính name
      // daoTaoCheckbox.checked = row.DaoTaoChecked || false; // Dùng một trường cho checkbox
      // daoTaoCheckbox.onchange = () => updateCheckAll('daoTao'); // Gọi hàm khi checkbox thay đổi
      // daoTaoCheckboxTd.appendChild(daoTaoCheckbox);
      // tableRow.appendChild(daoTaoCheckboxTd);

      // // Checkbox cho Tài Chính
      // const taiChinhCheckboxTd = document.createElement('td');
      // const taiChinhCheckbox = document.createElement('input');
      // taiChinhCheckbox.type = 'checkbox';
      // taiChinhCheckbox.name = 'taiChinh'; // Thêm thuộc tính name
      // taiChinhCheckbox.checked = row.TaiChinhChecked || false; // Dùng một trường cho checkbox
      // taiChinhCheckbox.onchange = () => updateCheckAll('taiChinh'); // Gọi hàm khi checkbox thay đổi
      // taiChinhCheckboxTd.appendChild(taiChinhCheckbox);
      // tableRow.appendChild(taiChinhCheckboxTd);

      tableBody.appendChild(tableRow);
    });
  }

  // Hàm ẩn gợi ý
  function hideSuggestions() {
    const suggestionsContainer = document.querySelector('.suggestions');
    if (suggestionsContainer) {
      suggestionsContainer.remove();
    }
  }

  function submitData() {
    const rows = document.querySelectorAll('#tableBody tr'); // Lấy tất cả các hàng trong bảng

    rows.forEach((row, index) => {
      // Bỏ qua các hàng đang bị ẩn
      if (row.style.display === 'none') {
        return;
      }
      // Lấy giá trị của ô nhập "Giáo Viên Giảng Dạy"
      const giaoVienGiangDayInput = row.querySelector('input[type="text"][placeholder="Nhập tên giảng viên"]');

      // Lấy giá trị của ô nhập "Bộ Môn"
      const boMonInput = row.querySelector('input[type="text"][placeholder="Nhập tên bộ môn"]');

      // Lấy giá trị của checkbox "Đào Tạo"
      const moiGiangCheckbox = row.querySelector('input[type="checkbox"][name="moigiang"]');

      // Lấy giá trị của checkbox "Khoa"
      const khoaCheckbox = row.querySelector('input[type="checkbox"][name="khoa"]');

      // Lấy giá trị từ các ô nhập liệu
      const giaoVienGiangDay = giaoVienGiangDayInput ? giaoVienGiangDayInput.value : '';
      const boMon = boMonInput ? boMonInput.value : '';

      // Lấy trạng thái của checkbox "Khoa" và "Đào Tạo"
      const khoaDuyet = khoaCheckbox ? khoaCheckbox.checked : false;
      const moiGiang = moiGiangCheckbox ? moiGiangCheckbox.checked : false;

      const ngayBatDauValue = document.getElementById('startDate').value;
      const ngayKetThucValue = document.getElementById('endDate').value;

      // Cập nhật vào mảng globalData tương ứng với chỉ mục hàng (index)
      globalData[index].GiaoVienGiangDay = giaoVienGiangDay;
      globalData[index].BoMon = boMon;
      globalData[index].KhoaDuyet = khoaDuyet;
      globalData[index].MoiGiang = moiGiang;
      globalData[index].NgayBatDau = ngayBatDauValue;
      globalData[index].NgayKetThuc = ngayKetThucValue;
    });


    // Kiểm tra dữ liệu đã được cập nhật trong globalData
    console.log(globalData);

    // Gửi dữ liệu đến server
    fetch('http://localhost:3000/check-teaching', {
      method: 'POST', // Phương thức POST
      headers: {
        'Content-Type': 'application/json' // Định dạng gửi là JSON
      },
      body: JSON.stringify(globalData) // Chuyển đổi globalData thành chuỗi JSON
    })
      .then(response => {
        if (!response.ok) {
          throw new Error('Lỗi khi gửi dữ liệu');
        }
        return response.json(); // Chuyển đổi phản hồi thành JSON
      })
      .then(data => {
        // Xử lý dữ liệu phản hồi từ server (nếu cần)
        console.log('Dữ liệu phản hồi từ server:', data);
        alert('Cập nhật thành công!');
      })
      .catch(error => {
        console.error('Có lỗi xảy ra:', error);
        alert('Có lỗi xảy ra khi cập nhật dữ liệu.');
      });
  }

  function filterByName() {
    const input = document.getElementById('filterName');
    const filter = input.value.toLowerCase();
    const tableRows = document.querySelectorAll('#tableBody tr');

    // Nếu ô tìm kiếm trống, hiển thị tất cả các dòng
    if (!filter) {
      tableRows.forEach(row => {
        row.style.display = ''; // Hiện tất cả các dòng
        const checkbox = row.querySelector('input[type="checkbox"]');
        checkbox.disabled = false; // Kích hoạt checkbox
      });
      return;
    }

    // Chỉ hiện các dòng có tên giảng viên khớp với giá trị tìm kiếm
    tableRows.forEach(row => {
      const nameCell = row.querySelector('td:nth-child(3)'); // Giả sử tên giảng viên nằm ở cột thứ 5
      const name = nameCell.textContent.toLowerCase();
      const checkbox = row.querySelector('input[type="checkbox"]');

      if (name.includes(filter)) {
        row.style.display = ''; // Hiện hàng nếu khớp
        checkbox.disabled = false; // Kích hoạt checkbox
      } else {
        row.style.display = 'none'; // Ẩn hàng nếu không khớp
        checkbox.disabled = true; // Vô hiệu hóa checkbox
      }
    });
  }

  function filterByClass() {
    const input = document.getElementById('filterClass');
    const filter = input.value.toLowerCase();
    const tableRows = document.querySelectorAll('#tableBody tr');

    // Nếu ô tìm kiếm trống, hiển thị tất cả các dòng
    if (!filter) {
      tableRows.forEach(row => {
        row.style.display = ''; // Hiện tất cả các dòng
        const checkbox = row.querySelector('input[type="checkbox"]');
        checkbox.disabled = false; // Kích hoạt checkbox
      });
      return;
    }

    // Chỉ hiện các dòng có tên giảng viên khớp với giá trị tìm kiếm
    tableRows.forEach(row => {
      const nameCell = row.querySelector('td:nth-child(1)'); // Giả sử tên giảng viên nằm ở cột thứ 5
      const name = nameCell.textContent.toLowerCase();
      const checkbox = row.querySelector('input[type="checkbox"]');

      if (name.includes(filter)) {
        row.style.display = ''; // Hiện hàng nếu khớp
        checkbox.disabled = false; // Kích hoạt checkbox
      } else {
        row.style.display = 'none'; // Ẩn hàng nếu không khớp
        checkbox.disabled = true; // Vô hiệu hóa checkbox
      }
    });
  }

  // Hàm tính tổng số tiết từ globalData
  function calculateTotals() {
    totalLL = 0; // Reset tổng số tiết LL
    totalQC = 0; // Reset tổng số tiết QC

    // Duyệt qua từng phần tử trong globalData để cộng dồn số tiết
    globalData.forEach(item => {
      totalLL += item.LL; // Cộng dồn số tiết LL
      totalQC += item.QuyChuan; // Cộng dồn số tiết QC
    });

    // Cập nhật tổng số tiết vào HTML
    document.getElementById('totalLL').textContent = totalLL;
    document.getElementById('totalQC').textContent = totalQC;
  }

  function checkAll(type) {
    const checkboxes = document.querySelectorAll(`input[type="checkbox"][name="${type}"]`);
    const checkAllCheckbox = document.getElementById(`checkAll${type.charAt(0).toUpperCase() + type.slice(1)}`);

    checkboxes.forEach(checkbox => {
      checkbox.checked = checkAllCheckbox.checked; // Gán trạng thái checkbox "Check All" cho tất cả các checkbox
    });
  }

  // Hàm để cập nhật trạng thái của checkbox "Check All" khi checkbox cá nhân được chọn
  function updateCheckAll(type) {
    const checkboxes = document.querySelectorAll(`input[type="checkbox"][name="${type}"]`);
    const checkAllCheckbox = document.getElementById(`checkAll${type.charAt(0).toUpperCase() + type.slice(1)}`);

    // Kiểm tra nếu tất cả checkbox cá nhân đều được chọn
    const allChecked = Array.from(checkboxes).every(checkbox => checkbox.checked);
    checkAllCheckbox.checked = allChecked; // Cập nhật trạng thái của checkbox "Check All"
  }

  // Hàm khởi động ứng dụng
  init();
</script>

</body>

</html>