<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Học Viện Kỹ Thuật Mật Mã</title>
  <link rel="stylesheet" href="/css/teachingInfo.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css">
  <link rel="stylesheet" href="/css/styles.css">
</head>

<body>
  <div class="fixed-top">
    <nav class="navbar-top ">
      <div class="container-fluid">
          <a class="navbar-brand" href="#">
              <img src="/Logo-Hoc-Vien-Ky-Thuat-Mat-Ma-ACTVN.webp" alt="Logo">
              <div class="navbar-title">
                <img src="/dongchu_banner.png" alt="banner">
              </div>
          </a>
      </div>
  </nav>
  
  <!-- Phần dưới của navbar chứa các mục nằm ngang -->
  <nav class="navbar navbar-expand-lg navbar-bottom">
      <div class="container-fluid">
          <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
              <span class="navbar-toggler-icon"></span>
          </button>
          <div class="collapse navbar-collapse justify-content-center" id="navbarNav">
              <ul class="navbar-nav">
                  <li class="nav-item">
                      <a class="nav-link" href="/maindt">HOME</a>
                  </li>
                  <li class="nav-item">
                      <a class="nav-link active" href="/maindt/teachingInfo">Thông tin GD</a>
                  </li>
                  <li>
                  <li class="nav-item">
                      <a class="nav-link" href="/index/import">Import</a>
                  </li>
                  <li class="nav-item">
                      <a class="nav-link" href="#">Duyệt</a>
                  </li>
                  <li class="nav-item">
                    <a class="nav-link" href="/maindt/tableQC">Bảng quy chuẩn</a>
                  </li>
                  <div class="navbar-nav">
                    <div class="nav-item dropdown">
                          <a class="nav-link dropdown-toggle" href="/login" id="navbarDropdownUser" data-bs-toggle="dropdown" aria-expanded="false">
                            Hi, Lê Đức Thuận
                          </a>
                          <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                            <a class="dropdown-item" href="#">Thông tin cá nhân</a>
                            <a class="dropdown-item" href="/">Đăng xuất</a>
                        </div>
                    </div>
              </ul>
          </div>
      </div>
    </nav>
   </div>  

  <div class="container my-4 mg-top">
        <div class="mx-5">
          <button id="infoGvm" class="button text-nowrap mb-3">Xem dữ liệu giảng viên</button>
          <button onclick="submitData()" class="button mx-3">Cập nhật</button>
          <input type="text" id="filterName" placeholder="Nhập tên giảng viên để tìm" oninput="filterByName()"
            class="form-control mb-3 search" style="width: 300px;"/>
          <div id="renderInfo">
            <table class="table table-bordered text-center" style="width: 100%;">
              <thead>
                <tr>
                  <th>Học phần</th>
                  <th>Số TC</th>
                  <th>GV theo TKB</th>
                  <th>GV mời?</th>
                  <th>GV giảng dạy</th>
                  <th>Khoa</th>
                  <th>Bộ môn</th>
                  <th>Số tiết LL</th>
                  <th>Số tiết QC</th>
                </tr>
              </thead>
              <tbody id="tableBody">
                <!-- Dữ liệu sẽ được chèn vào đây -->
              </tbody>
            </table>
          </div>
        </div>
  </div>

  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

  <script>
    let globalData = []; // Biến toàn cục để lưu dữ liệu từ server
    let nameGvm = []; // Biến toàn cục để lưu tất cả tên giảng viên
    let nameGvm2 = []; // Biến toàn cục để lưu tên giảng viên theo khoa

    // Hàm khởi động ứng dụng
    function init() {
      document.getElementById('infoGvm').addEventListener('click', loadData);
    }

    // Hàm tải dữ liệu từ server
    async function loadData() {
      try {
        // Fetch tên giảng viên mời
        const [gvmResponse, khoaResponse, teachingResponse] = await Promise.all([
          fetch('http://localhost:3000/index/name-gvm'),
          fetch('http://localhost:3000/index/name-gvm-khoa'),
          fetch('http://localhost:3000/index/teaching-info'),
        ]);

        if (!gvmResponse.ok || !khoaResponse.ok || !teachingResponse.ok) {
          throw new Error('Network response was not ok');
        }

        // Lưu dữ liệu giảng viên cùng với mã phòng ban
        nameGvm = await gvmResponse.json();
        console.log('Dữ liệu giảng viên trường :', nameGvm); // Kiểm tra dữ liệu

        nameGvm2 = await khoaResponse.json();
        console.log('Dữ liệu giảng viên mời theo khoa:', nameGvm2);

        globalData = await teachingResponse.json();
        console.log('Tổng hợp bảng dữ liệu:', globalData);

        renderTable(globalData); // Gọi hàm renderTable sau khi đã có đủ dữ liệu
      } catch (error) {
        console.error('Đã có lỗi xảy ra:', error);
      }
    }

    // Hàm hiển thị gợi ý giảng viên
    function showSuggestions(input, inviteCheckbox, maPhongBan) {
      const value = input.value.toLowerCase();
      hideSuggestions(); // Ẩn gợi ý cũ trước khi hiển thị gợi ý mới

      const suggestionsContainer = document.createElement('div');
      suggestionsContainer.className = 'suggestions';
      input.parentElement.appendChild(suggestionsContainer);

      let suggestions = [];

      // Trường hợp checkbox được check
      if (inviteCheckbox.checked) {
        if (!value) {
          // Hiển thị toàn bộ giảng viên của khoa nếu không có giá trị input
          suggestions = nameGvm2.filter(item => item.MaPhongBan === maPhongBan).map(item => item.HoTen);
          // console.log('1' + suggestions);
        } else {
          // Lọc giảng viên theo khoa và giá trị input
          suggestions = nameGvm2.filter(item => item.MaPhongBan === maPhongBan && item.HoTen.toLowerCase().includes(value)).map(item => item.HoTen);
        }
      } else {
        // Trường hợp checkbox không được check, hiển thị giảng viên theo khoa của dòng
        suggestions = nameGvm.filter(item => item.MaPhongBan === maPhongBan).map(item => item.TenNhanVien);
        // console.log('2' + suggestions);

      }

      // Nếu suggestions vẫn rỗng, kiểm tra lại dữ liệu
      if (suggestions.length === 0) {
        console.warn('Không có giảng viên nào khớp với điều kiện:', {
          maPhongBan,
          suggestions,
          allNames: nameGvm,
          allNames2: nameGvm2
        });
      }

      // Tạo gợi ý dưới dạng danh sách (list)
      suggestions.forEach(name => {
        // Kiểm tra nếu name là một mảng
        if (Array.isArray(name)) {
          name.forEach(subName => {
            // Nếu là mảng, thêm từng phần tử vào gợi ý
            const suggestionItem = document.createElement('div');
            suggestionItem.className = 'suggestion-item'; // Đặt class để tùy chỉnh giao diện
            suggestionItem.textContent = subName; // Hiển thị tên giảng viên

            suggestionItem.onclick = function () {
              console.log(subName); // Log tên giảng viên khi người dùng chọn gợi ý
              input.value = subName; // Gán tên được chọn vào ô input
              hideSuggestions();  // Ẩn danh sách gợi ý sau khi chọn
            };

            suggestionsContainer.appendChild(suggestionItem); // Thêm mục vào danh sách gợi ý
          });
        } else {
          // Nếu name không phải là mảng, thêm vào danh sách gợi ý như cũ
          const suggestionItem = document.createElement('div');
          suggestionItem.className = 'suggestion-item'; // Đặt class để tùy chỉnh giao diện
          suggestionItem.textContent = name; // Hiển thị tên giảng viên

          suggestionItem.onclick = function () {
            console.log(name); // Log tên giảng viên khi người dùng chọn gợi ý
            input.value = name; // Gán tên được chọn vào ô input
            hideSuggestions();  // Ẩn danh sách gợi ý sau khi chọn
          };

          suggestionsContainer.appendChild(suggestionItem); // Thêm mục vào danh sách gợi ý
        }
      });


      // Xóa gợi ý nếu không có tên nào khớp
      if (suggestions.length === 0) {
        suggestionsContainer.remove();
      }

      // Ẩn gợi ý khi input không còn focus
      input.onblur = function () {
        setTimeout(() => {
          hideSuggestions();
        }, 100); // Thời gian chờ để nhận diện click
      };
    }

    // Hàm ẩn gợi ý
    function hideSuggestions() {
      const suggestionsContainer = document.querySelector('.suggestions');
      if (suggestionsContainer) {
        suggestionsContainer.remove();
      }
    }


    // Hàm render bảng
    function renderTable(data) {
      const tableBody = document.getElementById('tableBody');
      tableBody.innerHTML = ''; // Xóa nội dung cũ

      data.forEach((row) => {
        const tableRow = document.createElement('tr');

        const lopHocPhanTd = document.createElement('td');
        lopHocPhanTd.textContent = `${row.TenLop} (${row.Lop})` || '';
        tableRow.appendChild(lopHocPhanTd);

        const soTcTd = document.createElement('td');
        soTcTd.textContent = row.SoTinChi || '';
        tableRow.appendChild(soTcTd);

        const giaoVienTd = document.createElement('td');
        giaoVienTd.textContent = row.GiaoVien || '';
        tableRow.appendChild(giaoVienTd);

        const moiGiangTd = document.createElement('td');
        const inviteCheckbox = document.createElement('input');
        inviteCheckbox.type = 'checkbox';
        inviteCheckbox.checked = row.MoiGiang || false;

        // Sự kiện khi checkbox thay đổi
        inviteCheckbox.onchange = () => {
          if (inviteCheckbox.checked) {
            // Hiển thị gợi ý nếu checkbox được chọn
            showSuggestions(giaoVienGiangDayInput, inviteCheckbox, row.Khoa); // Sử dụng row.Khoa
          } else {
            // Nếu checkbox không được chọn, ẩn gợi ý
            hideSuggestions();
            giaoVienGiangDayInput.value = ''; // Tùy chọn: xóa ô nhập liệu nếu checkbox không được chọn
          }
        };

        moiGiangTd.appendChild(inviteCheckbox);
        tableRow.appendChild(moiGiangTd);

        const giaoVienGiangDayTd = document.createElement('td');
        const giaoVienGiangDayInput = document.createElement('input');
        giaoVienGiangDayInput.type = 'text';
        giaoVienGiangDayInput.placeholder = 'Nhập tên giảng viên';
        giaoVienGiangDayInput.value = row.GiaoVienGiangDay || '';

        // Sự kiện để hiển thị gợi ý khi người dùng nhập
        giaoVienGiangDayInput.oninput = () => {
          if (inviteCheckbox.checked) { // Chỉ hiển thị gợi ý nếu checkbox được chọn
            showSuggestions(giaoVienGiangDayInput, inviteCheckbox, row.Khoa); // Sử dụng row.Khoa
          }
        };

        // Thêm sự kiện click vào ô nhập để hiển thị gợi ý
        giaoVienGiangDayInput.onclick = function () {
          if (!inviteCheckbox.checked) { // Hiển thị gợi ý khi click vào ô input nếu checkbox không được chọn
            showSuggestions(giaoVienGiangDayInput, inviteCheckbox, row.Khoa); // Sử dụng row.Khoa
          }
        };

        giaoVienGiangDayTd.appendChild(giaoVienGiangDayInput);
        tableRow.appendChild(giaoVienGiangDayTd);

        const khoaTd = document.createElement('td');
        khoaTd.textContent = row.Khoa || ''; // Lấy giá trị Khoa trực tiếp từ row
        tableRow.appendChild(khoaTd);

        const boMonTd = document.createElement('td');
        boMonTd.textContent = ''; // Giá trị tạm thời
        tableRow.appendChild(boMonTd);

        const soTietLLTd = document.createElement('td');
        soTietLLTd.textContent = row.LL || '';
        tableRow.appendChild(soTietLLTd);

        const soTietQCTd = document.createElement('td');
        soTietQCTd.textContent = row.QuyChuan || '';
        tableRow.appendChild(soTietQCTd);

        tableBody.appendChild(tableRow);
      });
    }


    // Hàm ẩn gợi ý
    function hideSuggestions() {
      const suggestionsContainer = document.querySelector('.suggestions');
      if (suggestionsContainer) {
        suggestionsContainer.remove();
      }
    }

    function submitData() {
      const rows = document.querySelectorAll('.row-container');

      rows.forEach((row, index) => {
        const columns = row.querySelectorAll('.column');
        const giaoVienGiangDayInput = row.querySelector('input[type="text"]');
        const inviteCheckbox = row.querySelector('input[type="checkbox"]');

        const giaoVienGiangDay = giaoVienGiangDayInput.value ? giaoVienGiangDayInput.value : "";
        const moiGiang = inviteCheckbox.checked;

        globalData[index].GiaoVienGiangDay = giaoVienGiangDay;
        globalData[index].MoiGiang = moiGiang;
      });

      console.log(globalData);
      alert("Dữ liệu đã được gửi. Kiểm tra console để xem chi tiết.");
    }

    // Hàm khởi động ứng dụng
    init();
  </script>

</body>

</html>